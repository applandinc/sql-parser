// Generated by PEG.js 0.10.0.
//
// http://pegjs.org/

"use strict";

function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message = message;
  this.expected = expected;
  this.found = found;
  this.location = location;
  this.name = "SyntaxError";

  if (typeof Error.captureStackTrace === "function") {
    Error.captureStackTrace(this, peg$SyntaxError);
  }
}

peg$subclass(peg$SyntaxError, Error);

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
        literal: function(expectation) {
          return "\"" + literalEscape(expectation.text) + "\"";
        },

        "class": function(expectation) {
          var escapedParts = expectation.parts.map(function(part) {
            return Array.isArray(part)
              ? classEscape(part[0]) + "-" + classEscape(part[1])
              : classEscape(part);
          });

          return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
        },

        any: function(expectation) {
          return "any character";
        },

        end: function(expectation) {
          return "end of input";
        },

        other: function(expectation) {
          return expectation.description;
        }
      };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$DefaultTracer() {
  this.indentLevel = 0;
}

peg$DefaultTracer.prototype.trace = function(event) {
  var that = this;

  function log(event) {
    function repeat(string, n) {
       var result = "", i;

       for (i = 0; i < n; i++) {
         result += string;
       }

       return result;
    }

    function pad(string, length) {
      return string + repeat(" ", length - string.length);
    }

    if (typeof console === "object") {
      console.log(
        event.location.start.line + ":" + event.location.start.column + "-"
          + event.location.end.line + ":" + event.location.end.column + " "
          + pad(event.type, 10) + " "
          + repeat("  ", that.indentLevel) + event.rule
      );
    }
  }

  switch (event.type) {
    case "rule.enter":
      log(event);
      this.indentLevel++;
      break;

    case "rule.match":
      this.indentLevel--;
      log(event);
      break;

    case "rule.fail":
      this.indentLevel--;
      log(event);
      break;

    default:
      throw new Error("Invalid event type: " + event.type + ".");
  }
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};

  var peg$startRuleIndices = { start: 0, start_streaming: 1 };
  var peg$startRuleIndex = 0;

  var peg$consts = [
    function(s) {
        return s;
      },
    function(f, b) {
        return {
          'type': 'statement',
          'variant': 'list',
          'statement': flattenAll([ f, b ])
        };
      },
    function(s) { return s; },
    peg$otherExpectation("Type Definition"),
    function(t, a) {
        return Object.assign(t, a);
      },
    function(n) {
        return {
          'type': 'datatype',
          'variant': n[0],
          'affinity': n[1]
        };
      },
    peg$otherExpectation("Custom Datatype Name"),
    function(t, r) {
        const variant = foldStringKey([ t, r ]);
        let affinity = 'numeric';
        if (/int/i.test(variant)) {
          affinity = 'integer';
        } else if (/char|clob|text/i.test(variant)) {
          affinity = 'text';
        } else if (/blob/i.test(variant)) {
          affinity = 'blob';
        } else if (/real|floa|doub/i.test(variant)) {
          affinity = 'real';
        }
        return {
          'type': 'datatype',
          'variant': variant,
          'affinity': affinity
        };
      },
    /^[\t ]/,
    peg$classExpectation(["\t", " "], false, false),
    function(w) {
        return w;
      },
    peg$otherExpectation("Type Definition Arguments"),
    function(a1, a2) {
        return {
          'args': {
            'type': 'expression',
            'variant': 'list',
            'expression': flattenAll([ a1, a2 ])
          }
        };
      },
    function(n) { return n; },
    peg$otherExpectation("Null Literal"),
    function(n) {
        return {
          'type': 'literal',
          'variant': 'null',
          'value': keyNode(n)
        };
      },
    peg$otherExpectation("Date Literal"),
    function(d) {
        return {
          'type': 'literal',
          'variant': 'date',
          'value': keyNode(d)
        };
      },
    peg$otherExpectation("String Literal"),
    function(n, s) {
        return {
          'type': 'literal',
          'variant': 'text',
          'value': s
        };
      },
    peg$otherExpectation("Single-quoted String Literal"),
    function(s) {
        /**
         * @note Unescaped the pairs of literal single quotation marks
         */
        /**
         * @note Not sure if the BLOB type should be un-escaped
         */
        return unescape(s, "'");
      },
    "''",
    peg$literalExpectation("''", false),
    /^[^']/,
    peg$classExpectation(["'"], true, false),
    peg$otherExpectation("Blob Literal"),
    /^[x]/i,
    peg$classExpectation(["x"], false, true),
    function(b) {
        return {
          'type': 'literal',
          'variant': 'blob',
          'value': b
        };
      },
    function(n) {
        return {
          'type': 'literal',
          'variant': 'text',
          'value': n
        };
      },
    peg$otherExpectation("Number Sign"),
    function(s, n) {
        if (isOkay(s)) {
          n['value'] = foldStringWord([ s, n['value'] ]);
        }
        return n;
      },
    function(d, e) {
        return {
          'type': 'literal',
          'variant': 'decimal',
          'value': foldStringWord([ d, e ])
        };
      },
    peg$otherExpectation("Decimal Literal"),
    function(f, b) { return foldStringWord([ f, b ]); },
    function(t, d) { return foldStringWord([ t, d ]); },
    peg$otherExpectation("Decimal Literal Exponent"),
    "e",
    peg$literalExpectation("E", true),
    /^[+\-]/,
    peg$classExpectation(["+", "-"], false, false),
    function(e, s, d) { return foldStringWord([ e, s, d ]); },
    peg$otherExpectation("Hexidecimal Literal"),
    "0x",
    peg$literalExpectation("0x", true),
    function(f, b) {
        return {
          'type': 'literal',
          'variant': 'hexidecimal',
          'value': foldStringWord([ f, b ])
        };
      },
    /^[0-9a-f]/i,
    peg$classExpectation([["0", "9"], ["a", "f"]], false, true),
    /^[0-9]/,
    peg$classExpectation([["0", "9"]], false, false),
    peg$otherExpectation("Bind Parameter"),
    function(b) {
        return Object.assign({
          'type': 'variable'
        }, b);
      },
    peg$otherExpectation("Numbered Bind Parameter"),
    function(q, id) {
        return {
          'format': 'numbered',
          'name': foldStringWord([ q, id ])
        };
      },
    /^[1-9]/,
    peg$classExpectation([["1", "9"]], false, false),
    function(f, r) {
        return foldStringWord([ f, r ]);
      },
    peg$otherExpectation("Named Bind Parameter"),
    /^[:@]/,
    peg$classExpectation([":", "@"], false, false),
    function(s, name) {
        return {
          'format': 'named',
          'name': foldStringWord([ s, name ])
        };
      },
    peg$otherExpectation("TCL Bind Parameter"),
    "$",
    peg$literalExpectation("$", false),
    ":",
    peg$literalExpectation(":", false),
    function(d, name, s) {
        return Object.assign({
          'format': 'tcl',
          'name': foldStringWord([ d, name ])
        }, s);
      },
    function(sfx) {
        return {
          'suffix': sfx
        };
      },
    peg$otherExpectation("EXISTS Expression"),
    function(n, e) {
        if (isOkay(n)) {
          return {
            'type': 'expression',
            'format': 'unary',
            'variant': 'exists',
            'expression': e,
            'operator': keyNode(n)
          };
        }
        return e;
      },
    peg$otherExpectation("EXISTS Keyword"),
    function(n, x) { return foldStringKey([ n, x ]); },
    peg$otherExpectation("RAISE Expression"),
    function(s, a) {
        return Object.assign({
          'type': 'expression',
          'format': 'unary',
          'variant': keyNode(s),
          'expression': a
        }, a);
      },
    peg$otherExpectation("RAISE Expression Arguments"),
    function(a) {
        return Object.assign({
          'type': 'error'
        }, a);
      },
    peg$otherExpectation("IGNORE Keyword"),
    function(f) {
        return {
          'action': keyNode(f)
        };
      },
    function(f, m) {
        return {
          'action': keyNode(f),
          'message': m
        };
      },
    function(n) {
        return n;
      },
    function(e, c) {
        return Object.assign(c, {
          'expression': e
        });
      },
    peg$otherExpectation("PSQL-style cast"),
    "::",
    peg$literalExpectation("::", false),
    function(e, d) {
        return {
          'type': 'expression',
          'format': 'unary',
          'variant': 'cast',
          'expression': e,
          'as': d
        };
      },
    function(op, e) {
        return {
          'type': 'expression',
          'format': 'unary',
          'variant': 'operation',
          'expression': e,
          'operator': keyNode(op)
        };
      },
    peg$otherExpectation("COLLATE Expression"),
    function(c) {
        return Object.assign({
          'type': 'expression',
          'format': 'unary',
          'variant': 'operation',
          'operator': 'collate'
        }, c);
      },
    function(f, rest) { return composeBinary(f, rest); },
    function(i) {
        return [null, i, null, {
          'type': 'literal',
          'variant': 'null',
          'value': 'null'
        }];
      },
    "not ",
    peg$literalExpectation("NOT ", true),
    "null",
    peg$literalExpectation("NULL", true),
    function() { return 'not'; },
    function() { return 'is'; },
    peg$otherExpectation("CAST Expression"),
    function(s, e, a) {
        return {
          'type': 'expression',
          'format': 'unary',
          'variant': keyNode(s),
          'expression': e,
          'as': a
        };
      },
    peg$otherExpectation("Type Alias"),
    function(d) { return d; },
    peg$otherExpectation("CASE Expression"),
    function(t, e, w, s) {
        return Object.assign({
          'type': 'expression',
          'variant': keyNode(t),
          'expression': flattenAll([ w, s ])
        }, e);
      },
    function(e) {
        return {
          'discriminant': e
        };
      },
    peg$otherExpectation("WHEN Clause"),
    function(s, w, t) {
        return {
          'type': 'condition',
          'variant': keyNode(s),
          'condition': w,
          'consequent': t
        };
      },
    peg$otherExpectation("ELSE Clause"),
    function(s, e) {
        return {
          'type': 'condition',
          'variant': keyNode(s),
          'consequent': e
        };
      },
    function(v, p) {
        return Object.assign(p, {
          'left': v
        });
      },
    peg$otherExpectation("Comparison Expression"),
    function(n, m, e, x) {
        return Object.assign({
          'type': 'expression',
          'format': 'binary',
          'variant': 'operation',
          'operation': foldStringKey([ n, m ]),
          'right': e
        }, x);
      },
    peg$otherExpectation("ESCAPE Expression"),
    function(s, e) {
        return {
          'escape': e
        };
      },
    peg$otherExpectation("BETWEEN Expression"),
    function(n, b, tail) {
        return {
          'type': 'expression',
          'format': 'binary',
          'variant': 'operation',
          'operation': foldStringKey([ n, b ]),
          'right': tail
        };
      },
    function(f, rest) { return composeBinary(f, [ rest ]); },
    function(n) { return keyNode(n); },
    peg$otherExpectation("IN Expression"),
    function(n, i, e) {
        return {
          'type': 'expression',
          'format': 'binary',
          'variant': 'operation',
          'operation': foldStringKey([ n, i ]),
          'right': e
        };
      },
    function(e) { return e; },
    peg$otherExpectation("Expression List"),
    function(l) {
        return {
          'type': 'expression',
          'variant': 'list',
          'expression': isOkay(l) ? l : []
        };
      },
    function(f, rest) {
        return flattenAll([ f, rest ]);
      },
    peg$otherExpectation("Function Call"),
    function(n, a, o) {
        return Object.assign({
          'type': 'function',
          'name': n
        }, a, o);
      },
    peg$otherExpectation("Function Call Arguments"),
    function(s) {
        return {
          'args': {
            'type': 'identifier',
            'variant': 'star',
            'name': s
          }
        };
      },
    function(d, e) {
        return !isOkay(d) || e['expression'].length > 0;
      },
    function(d, e) {
        return {
          'args': Object.assign(e, d)
        };
      },
    function(s) {
        return {
          'filter': keyNode(s)
        };
      },
    peg$otherExpectation("OVER clause"),
    function(w) {
        return {
          over: w
        };
      },
    peg$otherExpectation("Window name"),
    function(n) {
        return {
          'type': 'identifier',
          'variant': 'window',
          'name': n
        };
      },
    peg$otherExpectation("Window specification"),
    function(w, p, o) {
        return Object.assign({
          type: 'window'
        }, w, p, o);
      },
    function(n) {
        return {
          source: n
        };
      },
    peg$otherExpectation("window partition clause"),
    function(e) {
        return {
          partition: e
        };
      },
    peg$otherExpectation("Error Message"),
    function(m) { return m; },
    peg$otherExpectation("Statement"),
    function(m, s) {
        return Object.assign(s, m);
      },
    peg$otherExpectation("QUERY PLAN"),
    function(e, q) {
        return {
          'explain': isOkay(e)
        };
      },
    peg$otherExpectation("QUERY PLAN Keyword"),
    function(q, p) { return foldStringKey([ q, p ]); },
    peg$otherExpectation("END Transaction Statement"),
    function(s, t) {
        return {
          'type': 'statement',
          'variant': 'transaction',
          'action': 'commit'
        };
      },
    peg$otherExpectation("BEGIN Transaction Statement"),
    function(s, m, t, n) {
        return Object.assign({
          'type': 'statement',
          'variant': 'transaction',
          'action': 'begin'
        }, m, n);
      },
    function(t) { return t; },
    function(m) {
        return {
          'defer': keyNode(m)
        };
      },
    peg$otherExpectation("ROLLBACK Statement"),
    function(s, n) {
        return Object.assign({
          'type': 'statement',
          'variant': 'transaction',
          'action': 'rollback'
        }, n);
      },
    peg$otherExpectation("TO Clause"),
    function(n) {
        return {
          'savepoint': n
        }
      },
    function(s) { return keyNode(s); },
    peg$otherExpectation("SAVEPOINT Statement"),
    function(s, n) {
        return {
          'type': 'statement',
          'variant': s,
          'target': n
        };
      },
    peg$otherExpectation("RELEASE Statement"),
    function(s, a, n) {
        return {
          'type': 'statement',
          'variant': keyNode(s),
          'target': n
        };
      },
    peg$otherExpectation("ALTER TABLE Statement"),
    function(s, n, e) {
        return Object.assign({
          'type': 'statement',
          'variant': keyNode(s),
          'target': n
        }, e);
      },
    peg$otherExpectation("ALTER TABLE Keyword"),
    function(a, t) { return foldStringKey([ a, t ]); },
    peg$otherExpectation("RENAME TO Keyword"),
    function(s, n) {
        return {
          'action': keyNode(s),
          'name': n
        };
      },
    peg$otherExpectation("ADD COLUMN Keyword"),
    function(s, d) {
        return {
          'action': keyNode(s),
          'definition': d
        };
      },
    function(w, s) { return Object.assign(s, w); },
    peg$otherExpectation("WITH Clause"),
    function(s, v, t) {
        var recursive = {
          'variant': isOkay(v) ? 'recursive' : 'common'
        };
        if (isArrayOkay(t)) {
          // Add 'recursive' property into each table expression
          t = t.map(function (elem) {
            return Object.assign(elem, recursive);
          });
        }
        return {
          'with': t
        };
      },
    function(f, r) { return flattenAll([ f, r ]); },
    peg$otherExpectation("Common Table Expression"),
    function(t, s) {
        return Object.assign({
          'type': 'expression',
          'format': 'table',
          'variant': 'common',
          'target': t
        }, s);
      },
    function(s) {
        return {
          'expression': s
        };
      },
    function(w, s) {
        return Object.assign(s, w);
      },
    peg$otherExpectation("ATTACH Statement"),
    function(a, b, e, n) {
        return {
          'type': 'statement',
          'variant': keyNode(a),
          'target': n,
          'attach': e
        };
      },
    peg$otherExpectation("DETACH Statement"),
    function(d, b, n) {
        return {
          'type': 'statement',
          'variant': keyNode(d),
          'target': n
        };
      },
    peg$otherExpectation("VACUUM Statement"),
    function(v, t) {
        return Object.assign({
          'type': 'statement',
          'variant': 'vacuum'
        }, t);
      },
    function(t) {
        return {
          'target': t
        };
      },
    peg$otherExpectation("ANALYZE Statement"),
    function(s, a) {
        return Object.assign({
          'type': 'statement',
          'variant': keyNode(s)
        }, a);
      },
    function(n) {
        return {
          'target': n['name']
        };
      },
    peg$otherExpectation("REINDEX Statement"),
    function(a) {
        return {
          'target': a['name']
        };
      },
    peg$otherExpectation("PRAGMA Statement"),
    function(s, n, v) {
        return {
          'type': 'statement',
          'variant': keyNode(s),
          'target': n,
          'args': {
            'type': 'expression',
            'variant': 'list',
            'expression': v
          }
        };
      },
    function(v) { return v; },
    function(v) { return /^(yes|no|on|off|false|true|0|1)$/i.test(v) },
    function(v) {
        return {
          'type': 'literal',
          'variant': 'boolean',
          'normalized': (/^(yes|on|true|1)$/i.test(v) ? '1' : '0'),
          'value': v
        };
      },
    function(n) {
        return keyNode(n);
      },
    function(n) {
        return {
          'type': 'identifier',
          'variant': 'name',
          'name': n
        };
      },
    peg$otherExpectation("SELECT Statement"),
    function(s, o, l, w) {
        return Object.assign(s, o, l, w);
      },
    peg$otherExpectation("WINDOW clause"),
    function(l) {
        return {
          window: l
        };
      },
    function(n, d) {
        return Object.assign(d, {
          target: n
        });
      },
    peg$otherExpectation("ORDER BY Clause"),
    function(d) {
        return {
          'order': d['result']
        };
      },
    peg$otherExpectation("LIMIT Clause"),
    function(s, e, d) {
        return {
          'limit': Object.assign({
            'type': 'expression',
            'variant': 'limit',
            'start': e
          }, d)
        };
      },
    peg$otherExpectation("OFFSET Clause"),
    function(o, e) {
        return {
          'offset': e
        };
      },
    function(s, u) {
        if (isArrayOkay(u)) {
          return {
            'type': 'statement',
            'variant': 'compound',
            'statement': s,
            'compound': u
          };
        } else {
          return s;
        }
      },
    peg$otherExpectation("Union Operation"),
    function(c, s) {
        return {
          'type': 'compound',
          'variant': c,
          'statement': s
        };
      },
    function(s, f, w, g) {
        return Object.assign({
          'type': 'statement',
          'variant': 'select',
        }, s, f, w, g);
      },
    peg$otherExpectation("SELECT Results Clause"),
    function(d, t) {
        return Object.assign({
          'result': t
        }, d);
      },
    peg$otherExpectation("SELECT Results Modifier"),
    function(s) {
        return {
          'distinct': true
        };
      },
    function(s) {
        return {};
      },
    peg$otherExpectation("FROM Clause"),
    function(f, s) {
        return {
          'from': s
        };
      },
    peg$otherExpectation("WHERE Clause"),
    function(f, e) {
        return {
          'where': makeArray(e)
        };
      },
    peg$otherExpectation("GROUP BY Clause"),
    function(f, e, h) {
        return Object.assign({
          'group': e
        }, h);
      },
    peg$otherExpectation("HAVING Clause"),
    function(f, e) {
        return {
          'having': e
        };
      },
    function(q, s) {
        return {
          'type': 'identifier',
          'variant': 'star',
          'name': foldStringWord([ q, s ])
        };
      },
    function(n, s) { return foldStringWord([ n, s ]); },
    function(e, a) {
        return Object.assign(e, a);
      },
    function(f, t) {
        if (isArrayOkay(t)) {
          return {
            'type': 'map',
            'variant': 'join',
            'source': f,
            'map': t
          };
        }
        return f;
      },
    function(cl, c) {
        return Object.assign(cl, c);
      },
    peg$otherExpectation("CROSS JOIN Operation"),
    function(n) {
        return {
          'type': 'join',
          'variant': 'cross join',
          'source': n
        };
      },
    peg$otherExpectation("JOIN Operation"),
    function(o, n) {
        return {
          'type': 'join',
          'variant': keyNode(o),
          'source': n
        };
      },
    function(n, l, a) {
        return Object.assign({
          'type': 'function',
          'variant': 'table',
          'name': n,
          'args': l
        }, a);
      },
    peg$otherExpectation("Qualified Table"),
    function(d, i) {
        return Object.assign(d, i);
      },
    peg$otherExpectation("Qualified Table Identifier"),
    function(n, a) {
        return Object.assign(n, a);
      },
    peg$otherExpectation("Qualfied Table Index"),
    function(s, n) {
        return {
          'index': n
        };
      },
    function(n, i) {
        // TODO: Not sure what should happen here
        return {
          'index': foldStringKey([ n, i ])
        };
      },
    peg$otherExpectation("SELECT Source"),
    function(l, a) { return Object.assign(l, a); },
    peg$otherExpectation("Subquery"),
    function(s, a) {
        return Object.assign(s, a);
      },
    peg$otherExpectation("Alias"),
    function(a, n) {
        return {
          'alias': n
        };
      },
    peg$otherExpectation("JOIN Operator"),
    function(n, t, j) { return foldStringKey([ n, t, j ]); },
    function(t, o) { return foldStringKey([ t, o ]); },
    function(t) { return keyNode(t); },
    peg$otherExpectation("JOIN Constraint"),
    function(c) {
        return {
          'constraint': Object.assign({
            'type': 'constraint',
            'variant': 'join'
          }, c)
        }
      },
    peg$otherExpectation("Join ON Clause"),
    function(s, e) {
        return {
          'format': keyNode(s),
          'on': e
        };
      },
    peg$otherExpectation("Join USING Clause"),
    function(s, e) {
        return {
          'format': keyNode(s),
          'using': e
        };
      },
    peg$otherExpectation("VALUES Clause"),
    function(s, l) {
        return {
          'type': 'statement',
          'variant': 'select',
          'result': l
        };
      },
    function(f, b) {
        return {
          'result': flattenAll([ f, b ])
        };
      },
    function(i) { return i; },
    peg$otherExpectation("Ordering Expression"),
    function(e, d, n) {
        // Only convert this into an ordering expression if it contains
        // more than just the expression.
        if (isOkay(d) || isOkay(n)) {
          return Object.assign({
            'type': 'expression',
            'variant': 'order',
            'expression': e
          }, d, n);
        }
        return e;
      },
    function(d) {
        return {
          nulls: keyNode(d)
        };
      },
    peg$otherExpectation("Star"),
    peg$otherExpectation("Fallback Type"),
    peg$otherExpectation("INSERT Statement"),
    function(k, t, c, r) {
        return Object.assign({
          'type': 'statement',
          'variant': 'insert'
        }, k, t, c, r);
      },
    peg$otherExpectation("RETURNING clause"),
    function(t) {
        return {
          returning: t
        };
      },
    peg$otherExpectation("INSERT Keyword"),
    function(a, m) {
        return Object.assign({
          'action': keyNode(a)
        }, m);
      },
    peg$otherExpectation("REPLACE Keyword"),
    function(a) {
        return {
          'action': keyNode(a)
        };
      },
    peg$otherExpectation("INSERT OR Modifier"),
    function(s, m) {
        return {
          'or': keyNode(m)
        };
      },
    function(i, r) {
        return Object.assign({
          'into': i
        }, r);
      },
    peg$otherExpectation("INTO Clause"),
    function(s, t) {
        return t;
      },
    peg$otherExpectation("INTO Keyword"),
    function(r) {
        return {
          'result': r
        };
      },
    peg$otherExpectation("PostgreSQL INSERT ON CONFLICT clause"),
    "do",
    peg$literalExpectation("DO", true),
    function(i, a) {
        return {
          conflict: Object.assign(a, i)
        };
      },
    peg$otherExpectation("PostgreSQL ON CONFLICT action"),
    function(s, t, w) {
        return Object.assign({
          action: s
        }, t, w);
      },
    "nothing",
    peg$literalExpectation("NOTHING", true),
    function(s) {
        return {
          action: keyNode(s)
        };
      },
    peg$otherExpectation("PostgreSQL ON CONFLICT expression"),
    function(i, w) {
        return { on: Object.assign({columns: i}, w) };
      },
    function(c) {
        return { on: {
          constraint: c
        }};
      },
    peg$otherExpectation("Column List"),
    function(f, b) {
        return {
          'columns': flattenAll([ f, b ])
        };
      },
    function(c) { return c; },
    peg$otherExpectation("Column Name"),
    function(n) {
        return {
          'type': 'identifier',
          'variant': 'column',
          'name': n
        };
      },
    function(s, r) { return r; },
    peg$otherExpectation("VALUES Keyword"),
    function(f, b) { return flattenAll([ f, b ]); },
    peg$otherExpectation("Wrapped Expression List"),
    function(e) {
        return e;
      },
    peg$otherExpectation("DEFAULT VALUES Clause"),
    function(d, v) {
        return {
          'type': 'values',
          'variant': 'default'
          // TODO: Not sure what should go here
          // , 'values': null
        };
      },
    peg$otherExpectation("Compound Operator"),
    peg$otherExpectation("UNION Operator"),
    function(s, a) { return foldStringKey([ s, a ]); },
    function(a) { return a; },
    peg$otherExpectation("UPDATE Statement"),
    function(s, f, t, u, w, o, l, r) {
        return Object.assign({
          'type': 'statement',
          'variant': s,
          'into': t
        }, f, u, w, o, l, r);
      },
    peg$otherExpectation("UPDATE Keyword"),
    peg$otherExpectation("UPDATE OR Modifier"),
    function(t) {
        return {
          'or': keyNode(t)
        };
      },
    peg$otherExpectation("SET Clause"),
    function(c) {
        return {
          'set': c
        };
      },
    peg$otherExpectation("Column Assignment"),
    function(f, e) {
        return {
          'type': 'assignment',
          'target': f,
          'value': e
        };
      },
    peg$otherExpectation("UPDATE value expression"),
    function() {
        return {
          type: 'literal',
          variant: 'default',
          value: 'default'
        };
      },
    peg$otherExpectation("DELETE Statement"),
    function(s, t, w, o, l, r) {
        return Object.assign({
          'type': 'statement',
          'variant': s,
          'from': t
        }, w, o, l, r);
      },
    peg$otherExpectation("DELETE Keyword"),
    peg$otherExpectation("CREATE Statement"),
    peg$otherExpectation("CREATE TABLE Statement"),
    function(s, ne, id, r) {
        return Object.assign({
          'type': 'statement',
          'name': id
        }, s, r, ne);
      },
    function(s, tmp, t) {
        return Object.assign({
          'variant': s,
          'format': keyNode(t)
        }, tmp);
      },
    function(t) {
        return {
          'temporary': isOkay(t)
        };
      },
    peg$otherExpectation("IF NOT EXISTS Modifier"),
    function(i, n, e) {
        return {
          'condition': makeArray({
            'type': 'condition',
            'variant': keyNode(i),
            'condition': {
              'type': 'expression',
              'variant': keyNode(e),
              'operator': foldStringKey([ n, e ])
            }
          })
        };
      },
    peg$otherExpectation("Table Definition"),
    function(s, t, r) {
        return Object.assign({
          'definition': flattenAll([ s, t ])
        }, r);
      },
    function(r, w) {
        return {
          'optimization': [{
            'type': 'optimization',
            'value': foldStringKey([ r, w ])
          }]
        };
      },
    function(f) { return f; },
    peg$otherExpectation("Column Definition"),
    function(n, t, c) {
        return Object.assign({
          'type': 'definition',
          'variant': 'column',
          'name': n,
          'definition': (isOkay(c) ? c : []),
        }, t);
      },
    peg$otherExpectation("Column Datatype"),
    function(t) {
        return {
          'datatype': t
        };
      },
    peg$otherExpectation("Column Constraint"),
    function(n, c, ln) {
        return Object.assign(c, n);
      },
    function(cl) {
        return cl[cl.length - 1];
      },
    peg$otherExpectation("CONSTRAINT Name"),
    function(n) {
        return {
          'name': n
        };
      },
    peg$otherExpectation("FOREIGN KEY Column Constraint"),
    function(f) {
        return Object.assign({
          'variant': 'foreign key'
        }, f);
      },
    peg$otherExpectation("PRIMARY KEY Column Constraint"),
    function(p, d, c, a) {
        return Object.assign(p, c, d, a);
      },
    peg$otherExpectation("PRIMARY KEY Keyword"),
    function(s, k) {
        return {
          'type': 'constraint',
          'variant': foldStringKey([ s, k ])
        };
      },
    peg$otherExpectation("AUTOINCREMENT Keyword"),
    function(a) {
        return {
          'autoIncrement': true
        };
      },
    function(s, c) {
        return Object.assign({
          'type': 'constraint',
          'variant': s
        }, c);
      },
    peg$otherExpectation("UNIQUE Column Constraint"),
    peg$otherExpectation("NULL Column Constraint"),
    function(n, l) { return foldStringKey([ n, l ]); },
    peg$otherExpectation("CHECK Column Constraint"),
    peg$otherExpectation("DEFAULT Column Constraint"),
    function(s, v) {
        return {
          'type': 'constraint',
          'variant': keyNode(s),
          'value': v
        };
      },
    peg$otherExpectation("COLLATE Column Constraint"),
    function(c) {
        return {
          'type': 'constraint',
          'variant': 'collate',
          'collate': c
        };
      },
    peg$otherExpectation("Table Constraint"),
    function(n, c, nl) {
        return Object.assign({
          'type': 'definition',
          'variant': 'constraint'
        }, c, n);
      },
    peg$otherExpectation("CHECK Table Constraint"),
    function(c) {
        return {
          'definition': makeArray(c)
        };
      },
    peg$otherExpectation("PRIMARY KEY Table Constraint"),
    function(k, c, t) {
        return {
          'definition': makeArray(Object.assign(k, t, c[1])),
          'columns': c[0]
        };
      },
    function(s) {
        return {
          'type': 'constraint',
          'variant': keyNode(s)
        };
      },
    function(p, k) { return foldStringKey([ p, k ]); },
    peg$otherExpectation("UNIQUE Keyword"),
    function(u) { return keyNode(u); },
    function(f, b) {
        return [f].concat(b);
      },
    function(c) {
        return c.map(([ res ]) => res);
      },
    function(c) {
        const auto = c.find(([ res, a ]) => isOkay(a));
        return [
          c.map(([ res, a ]) => res),
          auto ? auto[1] : null
        ];
      },
    peg$otherExpectation("Indexed Column"),
    function(e, d, a) {
        // Only convert this into an ordering expression if it contains
        // more than just the expression.
        let res = e;
        if (isOkay(d)) {
          res = Object.assign({
            'type': 'expression',
            'variant': 'order',
            'expression': e
          }, d);
        }
        return [ res, a ];
      },
    peg$otherExpectation("Collation"),
    function(c) {
        return {
          'collate': makeArray(c)
        };
      },
    peg$otherExpectation("Column Direction"),
    function(t) {
        return {
          'direction': keyNode(t),
        };
      },
    function(s, t) {
        return {
          'conflict': keyNode(t)
        };
      },
    peg$otherExpectation("ON CONFLICT Keyword"),
    function(o, c) { return foldStringKey([ o, c ]); },
    function(k, c) {
        return {
          'type': 'constraint',
          'variant': keyNode(k),
          'expression': c
        };
      },
    peg$otherExpectation("FOREIGN KEY Table Constraint"),
    function(k, l, c) {
        return Object.assign({
          'definition': makeArray(Object.assign(k, c))
        }, l);
      },
    peg$otherExpectation("FOREIGN KEY Keyword"),
    function(f, k) {
        return {
          'type': 'constraint',
          'variant': foldStringKey([ f, k ])
        };
      },
    function(r, a, d) {
        return Object.assign({
          'type': 'constraint'
        }, r, a, d);
      },
    peg$otherExpectation("REFERENCES Clause"),
    function(s, t) {
        return {
          'references': t
        };
      },
    function(f, b) {
        return {
          'action': flattenAll([ f, b ])
        };
      },
    peg$otherExpectation("FOREIGN KEY Action Clause"),
    function(m, a, n) {
        return {
          'type': 'action',
          'variant': keyNode(m),
          'action': keyNode(n)
        };
      },
    peg$otherExpectation("FOREIGN KEY Action"),
    function(s, v) { return foldStringKey([ s, v ]); },
    function(c) { return keyNode(c); },
    function(n, a) { return foldStringKey([ n, a ]); },
    function(m, n) {
        return {
          'type': 'action',
          'variant': keyNode(m),
          'action': n
        };
      },
    peg$otherExpectation("DEFERRABLE Clause"),
    function(n, d, i) {
        return {
          'defer': foldStringKey([ n, d, i ])
        };
      },
    function(i, d) { return foldStringKey([ i, d ]); },
    function(s) {
        return {
          'definition': makeArray(s)
        };
      },
    peg$otherExpectation("CREATE INDEX Statement"),
    function(s, ne, n, o, w) {
        return Object.assign({
          'type': 'statement',
          'target': n,
          'on': o,
        }, s, ne, w);
      },
    function(s, u, i) {
        return Object.assign({
          'variant': keyNode(s),
          'format': keyNode(i)
        }, u);
      },
    function(u) {
        return {
          'unique': true
        };
      },
    peg$otherExpectation("ON Clause"),
    function(o, t, c) {
        return {
          'type': 'identifier',
          'variant': 'expression',
          'format': 'table',
          'name': t['name'],
          'columns': c
        };
      },
    peg$otherExpectation("CREATE TRIGGER Statement"),
    function(s, ne, n, cd, o, me, wh, a) {
        return Object.assign({
          'type': 'statement',
          'target': n,
          'on': o,
          'event': cd,
          'by': (isOkay(me) ? me : 'row'),
          'action': makeArray(a)
        }, s, ne, wh);
      },
    function(s, tmp, t) {
        return Object.assign({
          'variant': keyNode(s),
          'format': keyNode(t)
        }, tmp);
      },
    peg$otherExpectation("Conditional Clause"),
    function(m, d) {
        return Object.assign({
          'type': 'event'
        }, m, d);
      },
    function(m) {
        return {
          'occurs': keyNode(m)
        };
      },
    function(i, o) { return foldStringKey([ i, o ]); },
    peg$otherExpectation("Conditional Action"),
    function(o) {
        return {
          'event': keyNode(o)
        };
      },
    function(s, f) {
        return {
          'event': keyNode(s),
          'of': f
        };
      },
    function(s, c) { return c; },
    "statement",
    peg$literalExpectation("STATEMENT", true),
    function(f, e, r) { return keyNode(r); },
    function(w, e) {
        return {
          'when': e
        };
      },
    peg$otherExpectation("Actions Clause"),
    function(s, a, e) { return a; },
    function(l) { return l; },
    peg$otherExpectation("CREATE VIEW Statement"),
    function(s, ne, n, r) {
        return Object.assign({
          'type': 'statement',
          'target': n,
          'result': r
        }, s, ne);
      },
    function(n, a) {
        return Object.assign({
          'type': 'identifier',
          'variant': 'expression',
          'format': 'view',
          'name': n['name'],
          'columns': []
        }, a);
      },
    function(s, tmp, v) {
        return Object.assign({
          'variant': keyNode(s),
          'format': keyNode(v)
        }, tmp);
      },
    peg$otherExpectation("CREATE VIRTUAL TABLE Statement"),
    function(s, ne, n, m) {
        return Object.assign({
          'type': 'statement',
          'target': n,
          'result': m
        }, s, ne);
      },
    function(s, v, t) {
        return {
          'variant': keyNode(s),
          'format': keyNode(v)
        };
      },
    function(m, a) {
        return Object.assign({
          'type': 'module',
          'variant': 'virtual',
          'name': m
        }, a);
      },
    peg$otherExpectation("Module Arguments"),
    function(l) {
        return {
          'args': {
            'type': 'expression',
            'variant': 'list',
            'expression': isOkay(l) ? l : []
          }
        };
      },
    function(f, b) {
        return flattenAll([ f, b ]).filter((arg) => isOkay(arg));
      },
    function(a) {
        return a;
      },
    peg$otherExpectation("DROP Statement"),
    function(s, q) {
        /**
         * @note Manually copy in the correct variant for the target
         */
        return Object.assign({
          'type': 'statement',
          'target': Object.assign(q, {
                      'variant': s['format']
                    })
        }, s);
      },
    peg$otherExpectation("DROP Keyword"),
    function(s, t, i) {
         return Object.assign({
           'variant': keyNode(s),
           'format': t,
           'condition': []
         }, i);
      },
    peg$otherExpectation("DROP Type"),
    peg$otherExpectation("IF EXISTS Keyword"),
    function(i, e) {
        return {
          'condition': [{
            'type': 'condition',
            'variant': keyNode(i),
            'condition': {
              'type': 'expression',
              'variant': keyNode(e),
              'operator': keyNode(e)
            }
          }]
        };
      },
    peg$otherExpectation("Or"),
    peg$otherExpectation("Add"),
    peg$otherExpectation("Subtract"),
    peg$otherExpectation("Multiply"),
    peg$otherExpectation("Divide"),
    peg$otherExpectation("Modulo"),
    peg$otherExpectation("Shift Left"),
    peg$otherExpectation("Shift Right"),
    peg$otherExpectation("Logical AND"),
    peg$otherExpectation("Logical OR"),
    peg$otherExpectation("Less Than"),
    peg$otherExpectation("Greater Than"),
    peg$otherExpectation("Less Than Or Equal"),
    peg$otherExpectation("Greater Than Or Equal"),
    peg$otherExpectation("Equal"),
    peg$otherExpectation("Not Equal"),
    peg$otherExpectation("PostgreSQL custom binary operarator"),
    function(s) {
        const sym = s.join('');
        if (sym.includes('--') || sym.includes('/*')) return false;
        const last = s[s.length-1];
        if (!(last === '-' || last === '+')) return true;
        return sym.match(/[~@#%^&|`?]/);
      },
    function(s) { return s.join(''); },
    peg$otherExpectation("IS"),
    function(i, n) { return foldStringKey([ i, n ]); },
    peg$otherExpectation("Identifier"),
    peg$otherExpectation("Database Identifier"),
    function(n) {
        return {
          'type': 'identifier',
          'variant': 'database',
          'name': n
        };
      },
    peg$otherExpectation("Function Identifier"),
    function(d, n) {
        return {
          'type': 'identifier',
          // TODO: Should this be `table function` since it is table-function name
          'variant': 'function',
          'name': foldStringWord([ d, n ])
        };
      },
    peg$otherExpectation("Table Identifier"),
    function(d, n) {
        return {
          'type': 'identifier',
          'variant': 'table',
          'name': foldStringWord([ d, n ])
        };
      },
    function(n, d) { return foldStringWord([ n, d ]); },
    peg$otherExpectation("Column Identifier"),
    function(q, n) {
        return {
          'type': 'identifier',
          'variant': 'column',
          'name': foldStringWord([ q, n ])
        };
      },
    function() { return ''; },
    function(d, t) { return foldStringWord([ d, t ]); },
    peg$otherExpectation("Collation Identifier"),
    function(n) {
        return {
          'type': 'identifier',
          'variant': 'collation',
          'name': n
        };
      },
    peg$otherExpectation("Savepoint Identifier"),
    function(n) {
        return {
          'type': 'identifier',
          'variant': 'savepoint',
          'name': n
        };
      },
    peg$otherExpectation("Index Identifier"),
    function(d, n) {
        return {
          'type': 'identifier',
          'variant': 'index',
          'name': foldStringWord([ d, n ])
        };
      },
    peg$otherExpectation("Trigger Identifier"),
    function(d, n) {
        return {
          'type': 'identifier',
          'variant': 'trigger',
          'name': foldStringWord([ d, n ])
        };
      },
    peg$otherExpectation("View Identifier"),
    function(d, n) {
        return {
          'type': 'identifier',
          'variant': 'view',
          'name': foldStringWord([ d, n ])
        };
      },
    peg$otherExpectation("Pragma Identifier"),
    function(d, n) {
        return {
          'type': 'identifier',
          'variant': 'pragma',
          'name': foldStringWord([ d, n ])
        };
      },
    peg$otherExpectation("CTE Identifier"),
    function(d) {
        return d;
      },
    function(n, a) {
        return Object.assign({
          'type': 'identifier',
          'variant': 'expression',
          'format': 'table',
          'name': n['name'],
          'columns': []
        }, a);
      },
    peg$otherExpectation("Table Constraint Identifier"),
    function(n) {
        return {
          'type': 'identifier',
          'variant': 'constraint',
          'format': 'table',
          'name': n
        };
      },
    peg$otherExpectation("Column Constraint Identifier"),
    function(n) {
        return {
          'type': 'identifier',
          'variant': 'constraint',
          'format': 'column',
          'name': n
        };
      },
    peg$otherExpectation("Datatype Name"),
    function(t) { return [t, 'text']; },
    function(t) { return [t, 'real']; },
    function(t) { return [t, 'numeric']; },
    function(t) { return [t, 'integer']; },
    function(t) { return [t, 'none']; },
    peg$otherExpectation("TEXT Datatype Name"),
    "n",
    peg$literalExpectation("N", true),
    "var",
    peg$literalExpectation("VAR", true),
    "char",
    peg$literalExpectation("CHAR", true),
    "tiny",
    peg$literalExpectation("TINY", true),
    "medium",
    peg$literalExpectation("MEDIUM", true),
    "long",
    peg$literalExpectation("LONG", true),
    "text",
    peg$literalExpectation("TEXT", true),
    "clob",
    peg$literalExpectation("CLOB", true),
    peg$otherExpectation("REAL Datatype Name"),
    "float",
    peg$literalExpectation("FLOAT", true),
    "real",
    peg$literalExpectation("REAL", true),
    peg$otherExpectation("DOUBLE Datatype Name"),
    "double",
    peg$literalExpectation("DOUBLE", true),
    "precision",
    peg$literalExpectation("PRECISION", true),
    function(d, p) { return foldStringWord([ d, p ]); },
    peg$otherExpectation("NUMERIC Datatype Name"),
    "numeric",
    peg$literalExpectation("NUMERIC", true),
    "decimal",
    peg$literalExpectation("DECIMAL", true),
    "boolean",
    peg$literalExpectation("BOOLEAN", true),
    "date",
    peg$literalExpectation("DATE", true),
    "time",
    peg$literalExpectation("TIME", true),
    "stamp",
    peg$literalExpectation("STAMP", true),
    "string",
    peg$literalExpectation("STRING", true),
    peg$otherExpectation("INTEGER Datatype Name"),
    "int",
    peg$literalExpectation("INT", true),
    "2",
    peg$literalExpectation("2", false),
    "4",
    peg$literalExpectation("4", false),
    "8",
    peg$literalExpectation("8", false),
    "eger",
    peg$literalExpectation("EGER", true),
    "big",
    peg$literalExpectation("BIG", true),
    "small",
    peg$literalExpectation("SMALL", true),
    "floating",
    peg$literalExpectation("FLOATING", true),
    "point",
    peg$literalExpectation("POINT", true),
    function(f, p) {
        return foldStringWord([ f, p ]);
      },
    peg$otherExpectation("BLOB Datatype Name"),
    "blob",
    peg$literalExpectation("BLOB", true),
    /^[a-z0-9$_]/i,
    peg$classExpectation([["a", "z"], ["0", "9"], "$", "_"], false, true),
    "\\u",
    peg$literalExpectation("\\u", false),
    /^[a-f0-9]/i,
    peg$classExpectation([["a", "f"], ["0", "9"]], false, true),
    function(u, s) {
      return foldStringWord([ u, s ]).toLowerCase();
    },
    function(n) {
       return keyNode(n);
      },
    peg$anyExpectation(),
    function(n) {
        return textNode(n);
      },
    /^[ \t]/,
    peg$classExpectation([" ", "\t"], false, false),
    "\"",
    peg$literalExpectation("\"", false),
    "\"\"",
    peg$literalExpectation("\"\"", false),
    /^[^"]/,
    peg$classExpectation(["\""], true, false),
    function(n) { return unescape(n, '"'); },
    "'",
    peg$literalExpectation("'", false),
    function(n) { return unescape(n, "'"); },
    "`",
    peg$literalExpectation("`", false),
    "``",
    peg$literalExpectation("``", false),
    /^[^`]/,
    peg$classExpectation(["`"], true, false),
    function(n) { return unescape(n, '`'); },
    peg$otherExpectation("Open Bracket"),
    "[",
    peg$literalExpectation("[", false),
    peg$otherExpectation("Close Bracket"),
    "]",
    peg$literalExpectation("]", false),
    peg$otherExpectation("Open Parenthesis"),
    "(",
    peg$literalExpectation("(", false),
    peg$otherExpectation("Close Parenthesis"),
    ")",
    peg$literalExpectation(")", false),
    peg$otherExpectation("Comma"),
    ",",
    peg$literalExpectation(",", false),
    peg$otherExpectation("Period"),
    ".",
    peg$literalExpectation(".", false),
    peg$otherExpectation("Asterisk"),
    "*",
    peg$literalExpectation("*", false),
    peg$otherExpectation("Question Mark"),
    "?",
    peg$literalExpectation("?", false),
    peg$otherExpectation("Single Quote"),
    peg$otherExpectation("Double Quote"),
    peg$otherExpectation("Backtick"),
    peg$otherExpectation("Tilde"),
    "~",
    peg$literalExpectation("~", false),
    peg$otherExpectation("Plus"),
    "+",
    peg$literalExpectation("+", false),
    peg$otherExpectation("Minus"),
    "-",
    peg$literalExpectation("-", false),
    "=",
    peg$literalExpectation("=", false),
    peg$otherExpectation("Ampersand"),
    "&",
    peg$literalExpectation("&", false),
    peg$otherExpectation("Pipe"),
    "|",
    peg$literalExpectation("|", false),
    "%",
    peg$literalExpectation("%", false),
    "<",
    peg$literalExpectation("<", false),
    ">",
    peg$literalExpectation(">", false),
    peg$otherExpectation("Exclamation"),
    "!",
    peg$literalExpectation("!", false),
    peg$otherExpectation("Semicolon"),
    ";",
    peg$literalExpectation(";", false),
    peg$otherExpectation("Colon"),
    peg$otherExpectation("Forward Slash"),
    "/",
    peg$literalExpectation("/", false),
    peg$otherExpectation("Backslash"),
    "\\",
    peg$literalExpectation("\\", false),
    peg$otherExpectation("Operator characters"),
    /^[\-+*\/<>=~!@#%\^&|`]/,
    peg$classExpectation(["-", "+", "*", "/", "<", ">", "=", "~", "!", "@", "#", "%", "^", "&", "|", "`"], false, false),
    "abort",
    peg$literalExpectation("ABORT", true),
    "action",
    peg$literalExpectation("ACTION", true),
    "add",
    peg$literalExpectation("ADD", true),
    "after",
    peg$literalExpectation("AFTER", true),
    "all",
    peg$literalExpectation("ALL", true),
    "alter",
    peg$literalExpectation("ALTER", true),
    "analyze",
    peg$literalExpectation("ANALYZE", true),
    "and",
    peg$literalExpectation("AND", true),
    "as",
    peg$literalExpectation("AS", true),
    "asc",
    peg$literalExpectation("ASC", true),
    "attach",
    peg$literalExpectation("ATTACH", true),
    "autoincrement",
    peg$literalExpectation("AUTOINCREMENT", true),
    "before",
    peg$literalExpectation("BEFORE", true),
    "begin",
    peg$literalExpectation("BEGIN", true),
    "between",
    peg$literalExpectation("BETWEEN", true),
    "by",
    peg$literalExpectation("BY", true),
    "cascade",
    peg$literalExpectation("CASCADE", true),
    "case",
    peg$literalExpectation("CASE", true),
    "cast",
    peg$literalExpectation("CAST", true),
    "check",
    peg$literalExpectation("CHECK", true),
    "collate",
    peg$literalExpectation("COLLATE", true),
    "column",
    peg$literalExpectation("COLUMN", true),
    "commit",
    peg$literalExpectation("COMMIT", true),
    "conflict",
    peg$literalExpectation("CONFLICT", true),
    "constraint",
    peg$literalExpectation("CONSTRAINT", true),
    "create",
    peg$literalExpectation("CREATE", true),
    "cross",
    peg$literalExpectation("CROSS", true),
    "current_date",
    peg$literalExpectation("CURRENT_DATE", true),
    "current_time",
    peg$literalExpectation("CURRENT_TIME", true),
    "current_timestamp",
    peg$literalExpectation("CURRENT_TIMESTAMP", true),
    "database",
    peg$literalExpectation("DATABASE", true),
    "default",
    peg$literalExpectation("DEFAULT", true),
    "deferrable",
    peg$literalExpectation("DEFERRABLE", true),
    "deferred",
    peg$literalExpectation("DEFERRED", true),
    "delete",
    peg$literalExpectation("DELETE", true),
    "desc",
    peg$literalExpectation("DESC", true),
    "detach",
    peg$literalExpectation("DETACH", true),
    "distinct",
    peg$literalExpectation("DISTINCT", true),
    "drop",
    peg$literalExpectation("DROP", true),
    "each",
    peg$literalExpectation("EACH", true),
    "else",
    peg$literalExpectation("ELSE", true),
    "end",
    peg$literalExpectation("END", true),
    "escape",
    peg$literalExpectation("ESCAPE", true),
    "except",
    peg$literalExpectation("EXCEPT", true),
    "exclusive",
    peg$literalExpectation("EXCLUSIVE", true),
    "exists",
    peg$literalExpectation("EXISTS", true),
    "explain",
    peg$literalExpectation("EXPLAIN", true),
    "fail",
    peg$literalExpectation("FAIL", true),
    "first",
    peg$literalExpectation("FIRST", true),
    "for",
    peg$literalExpectation("FOR", true),
    "foreign",
    peg$literalExpectation("FOREIGN", true),
    "from",
    peg$literalExpectation("FROM", true),
    "full",
    peg$literalExpectation("FULL", true),
    "glob",
    peg$literalExpectation("GLOB", true),
    "group",
    peg$literalExpectation("GROUP", true),
    "having",
    peg$literalExpectation("HAVING", true),
    "if",
    peg$literalExpectation("IF", true),
    "ignore",
    peg$literalExpectation("IGNORE", true),
    "immediate",
    peg$literalExpectation("IMMEDIATE", true),
    "in",
    peg$literalExpectation("IN", true),
    "index",
    peg$literalExpectation("INDEX", true),
    "indexed",
    peg$literalExpectation("INDEXED", true),
    "initially",
    peg$literalExpectation("INITIALLY", true),
    "inner",
    peg$literalExpectation("INNER", true),
    "insert",
    peg$literalExpectation("INSERT", true),
    "instead",
    peg$literalExpectation("INSTEAD", true),
    "intersect",
    peg$literalExpectation("INTERSECT", true),
    "into",
    peg$literalExpectation("INTO", true),
    "is",
    peg$literalExpectation("IS", true),
    "isnull",
    peg$literalExpectation("ISNULL", true),
    "join",
    peg$literalExpectation("JOIN", true),
    "key",
    peg$literalExpectation("KEY", true),
    "last",
    peg$literalExpectation("LAST", true),
    "left",
    peg$literalExpectation("LEFT", true),
    "like",
    peg$literalExpectation("LIKE", true),
    "limit",
    peg$literalExpectation("LIMIT", true),
    "match",
    peg$literalExpectation("MATCH", true),
    "natural",
    peg$literalExpectation("NATURAL", true),
    "no",
    peg$literalExpectation("NO", true),
    "not",
    peg$literalExpectation("NOT", true),
    "notnull",
    peg$literalExpectation("NOTNULL", true),
    "nulls",
    peg$literalExpectation("NULLS", true),
    "of",
    peg$literalExpectation("OF", true),
    "offset",
    peg$literalExpectation("OFFSET", true),
    "on",
    peg$literalExpectation("ON", true),
    "or",
    peg$literalExpectation("OR", true),
    "order",
    peg$literalExpectation("ORDER", true),
    "outer",
    peg$literalExpectation("OUTER", true),
    "over",
    peg$literalExpectation("OVER", true),
    "partition",
    peg$literalExpectation("PARTITION", true),
    "plan",
    peg$literalExpectation("PLAN", true),
    "pragma",
    peg$literalExpectation("PRAGMA", true),
    "primary",
    peg$literalExpectation("PRIMARY", true),
    "query",
    peg$literalExpectation("QUERY", true),
    "raise",
    peg$literalExpectation("RAISE", true),
    "recursive",
    peg$literalExpectation("RECURSIVE", true),
    "references",
    peg$literalExpectation("REFERENCES", true),
    "regexp",
    peg$literalExpectation("REGEXP", true),
    "reindex",
    peg$literalExpectation("REINDEX", true),
    "release",
    peg$literalExpectation("RELEASE", true),
    "rename",
    peg$literalExpectation("RENAME", true),
    "replace",
    peg$literalExpectation("REPLACE", true),
    "restrict",
    peg$literalExpectation("RESTRICT", true),
    "returning",
    peg$literalExpectation("RETURNING", true),
    "right",
    peg$literalExpectation("RIGHT", true),
    "rollback",
    peg$literalExpectation("ROLLBACK", true),
    "row",
    peg$literalExpectation("ROW", true),
    "rowid",
    peg$literalExpectation("ROWID", true),
    "savepoint",
    peg$literalExpectation("SAVEPOINT", true),
    "select",
    peg$literalExpectation("SELECT", true),
    "set",
    peg$literalExpectation("SET", true),
    "table",
    peg$literalExpectation("TABLE", true),
    "temp",
    peg$literalExpectation("TEMP", true),
    "temporary",
    peg$literalExpectation("TEMPORARY", true),
    "then",
    peg$literalExpectation("THEN", true),
    "to",
    peg$literalExpectation("TO", true),
    "transaction",
    peg$literalExpectation("TRANSACTION", true),
    "trigger",
    peg$literalExpectation("TRIGGER", true),
    "union",
    peg$literalExpectation("UNION", true),
    "unique",
    peg$literalExpectation("UNIQUE", true),
    "update",
    peg$literalExpectation("UPDATE", true),
    "using",
    peg$literalExpectation("USING", true),
    "vacuum",
    peg$literalExpectation("VACUUM", true),
    "values",
    peg$literalExpectation("VALUES", true),
    "view",
    peg$literalExpectation("VIEW", true),
    "virtual",
    peg$literalExpectation("VIRTUAL", true),
    "when",
    peg$literalExpectation("WHEN", true),
    "where",
    peg$literalExpectation("WHERE", true),
    "window",
    peg$literalExpectation("WINDOW", true),
    "with",
    peg$literalExpectation("WITH", true),
    "without",
    peg$literalExpectation("WITHOUT", true),
    function(r) { return keyNode(r); },
    function() { return null; },
    peg$otherExpectation("Line Comment"),
    "--",
    peg$literalExpectation("--", false),
    /^[\n\v\f\r]/,
    peg$classExpectation(["\n", "\v", "\f", "\r"], false, false),
    peg$otherExpectation("Block Comment"),
    "/*",
    peg$literalExpectation("/*", false),
    "*/",
    peg$literalExpectation("*/", false),
    /^[\n\v\f\r\t ]/,
    peg$classExpectation(["\n", "\v", "\f", "\r", "\t", " "], false, false),
    peg$otherExpectation("Whitespace"),
    "__TODO__",
    peg$literalExpectation("__TODO__", false)
  ];

  var peg$bytecode = [
    peg$decode("%;\u0258/H#;#/?$;\".\" &\"/1$;#/($8$: $!!)($'#(#'#(\"'#&'#"),
    peg$decode("%;\u0258/C#;#/:$;~/1$;#/($8$: $!!)($'#(#'#(\"'#&'#"),
    peg$decode("%;~/B#;\u0258/9$$;%0#*;%&/)$8#:!#\"\" )(#'#(\"'#&'#"),
    peg$decode("$;\u01C40#*;\u01C4&"),
    peg$decode("$;\u01C4/&#0#*;\u01C4&&&#"),
    peg$decode("%;$/:#;~/1$;\u0258/($8#:\"#!!)(#'#(\"'#&'#"),
    peg$decode("<%;'.# &;(/@#;\u0258/7$;*.\" &\"/)$8#:$#\"\" )(#'#(\"'#&'#=.\" 7#"),
    peg$decode("%;\u019C/' 8!:%!! )"),
    peg$decode("<%;\u01A6/9#$;)0#*;)&/)$8\":'\"\"! )(\"'#&'#=.\" 7&"),
    peg$decode("%4(\"\"5!7)/1#;\u01A8/($8\":*\"! )(\"'#&'#"),
    peg$decode("<%;\u01B1/R#;5/I$;\u0258/@$;+.\" &\"/2$;\u01B2/)$8%:,%\"#!)(%'#($'#(#'#(\"'#&'#=.\" 7+"),
    peg$decode("%;\u01B3/C#;\u0258/:$;5/1$;\u0258/($8$:-$!!)($'#(#'#(\"'#&'#"),
    peg$decode(";5.; &;6.5 &;2./ &;-.) &;..# &;/"),
    peg$decode("<%;\u021A/1#;\u0258/($8\":/\"!!)(\"'#&'#=.\" 7."),
    peg$decode("<%;\u01E4.) &;\u01E6.# &;\u01E5/1#;\u0258/($8\":1\"!!)(\"'#&'#=.\" 70"),
    peg$decode("<%;4.\" &\"/2#;0/)$8\":3\"\"! )(\"'#&'#=.\" 72"),
    peg$decode("<%;\u01B7/A#$;10#*;1&/1$;\u01B7/($8#:5#!!)(#'#(\"'#&'#=.\" 74"),
    peg$decode("26\"\"6677.) &48\"\"5!79"),
    peg$decode("<%4;\"\"5!7</1#;0/($8\":=\"! )(\"'#&'#=.\" 7:"),
    peg$decode("%;\u01A8.# &;\u01AC/' 8!:>!! )"),
    peg$decode("<%;\u01BB.# &;\u01BC/' 8!:\"!! )=.\" 7?"),
    peg$decode("%;4.\" &\"/2#;6/)$8\":@\"\"! )(\"'#&'#"),
    peg$decode(";<.# &;7"),
    peg$decode("%;8/7#;;.\" &\"/)$8\":A\"\"! )(\"'#&'#"),
    peg$decode("<;9.# &;:=.\" 7B"),
    peg$decode("%$;>/&#0#*;>&&&#/7#;:.\" &\"/)$8\":C\"\"! )(\"'#&'#"),
    peg$decode("%;\u01B4/9#$;>0#*;>&/)$8\":D\"\"! )(\"'#&'#"),
    peg$decode("<%3F\"\"5!7G/T#4H\"\"5!7I.\" &\"/@$$;>/&#0#*;>&&&#/*$8#:J##\"! )(#'#(\"'#&'#=.\" 7E"),
    peg$decode("<%3L\"\"5\"7M/?#$;=/&#0#*;=&&&#/)$8\":N\"\"! )(\"'#&'#=.\" 7K"),
    peg$decode("4O\"\"5!7P"),
    peg$decode("4Q\"\"5!7R"),
    peg$decode("<%;@.) &;B.# &;C/' 8!:T!! )=.\" 7S"),
    peg$decode("<%;\u01B6/@#;A.\" &\"/2$;\u0258/)$8#:V#\"\"!)(#'#(\"'#&'#=.\" 7U"),
    peg$decode("%4W\"\"5!7X/9#$;>0#*;>&/)$8\":Y\"\"! )(\"'#&'#"),
    peg$decode("<%4[\"\"5!7\\/H#$;\u01A4/&#0#*;\u01A4&&&#/2$;\u0258/)$8#:]#\"\"!)(#'#(\"'#&'#=.\" 7Z"),
    peg$decode("<%2_\"\"6_7`/o#$;\u01A4.) &2a\"\"6a7b/2#0/*;\u01A4.) &2a\"\"6a7b&&&#/A$;\u0258/8$;D.\" &\"/*$8$:c$##\" )($'#(#'#(\"'#&'#=.\" 7^"),
    peg$decode("%;\u01AC/1#;\u0258/($8\":d\"!!)(\"'#&'#"),
    peg$decode("<%;F.\" &\"/;#;\u0258/2$;\x9A/)$8#:f#\"\" )(#'#(\"'#&'#=.\" 7e"),
    peg$decode("<%;l.\" &\"/;#;\u01F6/2$;\u0258/)$8#:h#\"\"!)(#'#(\"'#&'#=.\" 7g"),
    peg$decode("<%;\u0228/_#;\u0258/V$;\u01B1/M$;\u0258/D$;H/;$;\u0258/2$;\u01B2/)$8':j'\"&\")(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7i"),
    peg$decode("<%;I.# &;J/' 8!:l!! )=.\" 7k"),
    peg$decode("<%;\u0202/' 8!:n!! )=.\" 7m"),
    peg$decode("%;\u0233.) &;\u01C9.# &;\u01F8/M#;\u0258/D$;\u01B3/;$;\u0258/2$;}/)$8%:o%\"$ )(%'#($'#(#'#(\"'#&'#"),
    peg$decode(";?./ &;u.) &;,.# &;\u018E"),
    peg$decode("%;\u01B1/L#;\u0258/C$;q/:$;\u0258/1$;\u01B2/($8%:p%!\")(%'#($'#(#'#(\"'#&'#"),
    peg$decode(";L.; &;E.5 &;`./ &;b.) &;G.# &;K"),
    peg$decode("%;M/;#;\u0258/2$;R/)$8#:q#\"\" )(#'#(\"'#&'#.# &;M"),
    peg$decode("<%;N/S#;\u0258/J$2s\"\"6s7t/;$;\u0258/2$;&/)$8%:u%\"$ )(%'#($'#(#'#(\"'#&'#.# &;N=.\" 7r"),
    peg$decode("%;Q/A#;\u0258/8$;O.# &;q/)$8#:v#\"\" )(#'#(\"'#&'#.# &;O"),
    peg$decode(";\u01BA.U &;\u01BC.O &;\u01BB.I &%%;l/8#%<;\u01F6=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)"),
    peg$decode("<%;\u013D/' 8!:x!! )=.\" 7w"),
    peg$decode("%;P/\x83#$%;\u0258/>#;\u0176/5$;\u0258/,$;P/#$+$)($'#(#'#(\"'#&'#0H*%;\u0258/>#;\u0176/5$;\u0258/,$;P/#$+$)($'#(#'#(\"'#&'#&/)$8\":y\"\"! )(\"'#&'#"),
    peg$decode("%;S/\x83#$%;\u0258/>#;U/5$;\u0258/,$;S/#$+$)($'#(#'#(\"'#&'#0H*%;\u0258/>#;U/5$;\u0258/,$;S/#$+$)($'#(#'#(\"'#&'#&/)$8\":y\"\"! )(\"'#&'#"),
    peg$decode(";\u0179.) &;\u017A.# &;\u017B"),
    peg$decode("%;T/\x83#$%;\u0258/>#;W/5$;\u0258/,$;T/#$+$)($'#(#'#(\"'#&'#0H*%;\u0258/>#;W/5$;\u0258/,$;T/#$+$)($'#(#'#(\"'#&'#&/)$8\":y\"\"! )(\"'#&'#"),
    peg$decode(";\u0177.# &;\u0178"),
    peg$decode("%;V/\x83#$%;\u0258/>#;Y/5$;\u0258/,$;V/#$+$)($'#(#'#(\"'#&'#0H*%;\u0258/>#;Y/5$;\u0258/,$;V/#$+$)($'#(#'#(\"'#&'#&/)$8\":y\"\"! )(\"'#&'#"),
    peg$decode(";\u017C.[ &;\u017D.U &;\u017E.O &;\u0187.I &%%;\u017F/8#%<;\u017F=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)"),
    peg$decode("%;X/\x83#$%;\u0258/>#;[/5$;\u0258/,$;X/#$+$)($'#(#'#(\"'#&'#0H*%;\u0258/>#;[/5$;\u0258/,$;X/#$+$)($'#(#'#(\"'#&'#&/)$8\":y\"\"! )(\"'#&'#"),
    peg$decode(";\u0182.{ &;\u0183.u &%%;\u0180/8#%<;Y=.##&&!&'#/#$+\")(\"'#&'#/\"!&,).I &%%;\u0181/8#%<;Y=.##&&!&'#/#$+\")(\"'#&'#/\"!&,)"),
    peg$decode("%;Z/9#$;]0#*;]&/)$8\":y\"\"! )(\"'#&'#"),
    peg$decode("%;\u0258/1#;^/($8\":z\"! )(\"'#&'#.H &%;\u0258/>#;_/5$;\u0258/,$;Z/#$+$)($'#(#'#(\"'#&'#"),
    peg$decode("%3{\"\"5$7|/?#;\u0258/6$3}\"\"5$7~/'$8#:\x7F# )(#'#(\"'#&'#.? &%;\u020E/& 8!:\x80! ).. &%;\u0219/& 8!:\x7F! )"),
    peg$decode(";\u0188./ &;\u0185.) &;\u0186.# &;\u0184"),
    peg$decode("<%;\u01DB/i#;\u0258/`$;\u01B1/W$;q/N$;\u0258/E$;a/<$;\u0258/3$;\u01B2/*$8(:\x82(#'$\")(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x81"),
    peg$decode("<%;\u01D1/:#;\u0258/1$;&/($8#:\x84#! )(#'#(\"'#&'#=.\" 7\x83"),
    peg$decode("<%;\u01DA/\x93#;\u0258/\x8A$;c.\" &\"/|$;\u0258/s$$;d/&#0#*;d&&&#/]$;\u0258/T$;e.\" &\"/F$;\u0258/=$;\u01F2/4$;\u0258/+$8*:\x86*$)'%#)(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x85"),
    peg$decode("%%<;\u0248=.##&&!&'#/1#;q/($8\":\x87\"! )(\"'#&'#"),
    peg$decode("<%;\u0248/i#;\u0258/`$;q/W$;\u0258/N$;\u023C/E$;\u0258/<$;q/3$;\u0258/*$8(:\x89(#'%!)(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x88"),
    peg$decode("<%;\u01F1/D#;\u0258/;$;q/2$;\u0258/)$8$:\x8B$\"#!)($'#(#'#(\"'#&'#=.\" 7\x8A"),
    peg$decode("%;\\/;#;\u0258/2$;g/)$8#:\x8C#\"\" )(#'#(\"'#&'#.# &;\\"),
    peg$decode(";m.) &;j.# &;h"),
    peg$decode("<%;l.\" &\"/o#;\u0213./ &;\u01FE.) &;\u022B.# &;\u0215/T$;\u0258/K$;q/B$;\u0258/9$;i.\" &\"/+$8&:\x8E&$%$\" )(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x8D"),
    peg$decode("<%;\u01F3/D#;\u0258/;$;q/2$;\u0258/)$8$:\x90$\"#!)($'#(#'#(\"'#&'#=.\" 7\x8F"),
    peg$decode("<%;l.\" &\"/E#;\u01D7/<$;\u0258/3$;k/*$8$:\x92$##\" )($'#(#'#(\"'#&'#=.\" 7\x91"),
    peg$decode("%;f/W#%;\u0258/>#;\u01D0/5$;\u0258/,$;f/#$+$)($'#(#'#(\"'#&'#/)$8\":\x93\"\"! )(\"'#&'#"),
    peg$decode("%;\u0218/1#;\u0258/($8\":\x94\"!!)(\"'#&'#"),
    peg$decode("<%;l.\" &\"/E#;\u0204/<$;\u0258/3$;n/*$8$:\x96$##\" )($'#(#'#(\"'#&'#=.\" 7\x95"),
    peg$decode(";o.# &;\u018C"),
    peg$decode("%;\u01B1/I#;\x9B.# &;r/:$;\u0258/1$;\u01B2/($8$:\x97$!\")($'#(#'#(\"'#&'#"),
    peg$decode("%;f/\x83#$%;\u0258/>#;\u01D0/5$;\u0258/,$;f/#$+$)($'#(#'#(\"'#&'#0H*%;\u0258/>#;\u01D0/5$;\u0258/,$;f/#$+$)($'#(#'#(\"'#&'#&/)$8\":y\"\"! )(\"'#&'#"),
    peg$decode("%;p/\x83#$%;\u0258/>#;\u021F/5$;\u0258/,$;p/#$+$)($'#(#'#(\"'#&'#0H*%;\u0258/>#;\u021F/5$;\u0258/,$;p/#$+$)($'#(#'#(\"'#&'#&/)$8\":y\"\"! )(\"'#&'#"),
    peg$decode("<%;s.\" &\"/1#;\u0258/($8\":\x99\"!!)(\"'#&'#=.\" 7\x98"),
    peg$decode("%;q/B#;\u0258/9$$;t0#*;t&/)$8#:\x9A#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u01B3/:#;q/1$;\u0258/($8#:\x97#!!)(#'#(\"'#&'#"),
    peg$decode("<%;\u018B/s#;\u0258/j$;\u01B1/a$;v.\" &\"/S$;\u0258/J$;\u01B2/A$;\u0258/8$;x.\" &\"/*$8(:\x9C(#'$ )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\x9B"),
    peg$decode("<%;\xE6/' 8!:\x9E!! ).V &%;w.\" &\"/G#;r/>$9:\x9F \"! -\"\"&!&#/)$8#:\xA0#\"\"!)(#'#(\"'#&'#=.\" 7\x9D"),
    peg$decode("%;\u01EE.# &;\u01CD/1#;\u0258/($8\":\xA1\"!!)(\"'#&'#"),
    peg$decode("<%;\u0222/@#;\u0258/7$;z.# &;y/($8#:\xA3#! )(#'#(\"'#&'#=.\" 7\xA2"),
    peg$decode("<%;\u0189/' 8!:\xA5!! )=.\" 7\xA4"),
    peg$decode("<%;\u01B1/\x81#;\u0258/x$;{.\" &\"/j$;\u0258/a$;|.\" &\"/S$;\u0258/J$;\xB3.\" &\"/<$;\u0258/3$;\u01B2/*$8):\xA7)#&$\")()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\xA6"),
    peg$decode("%;y/P#%<%;\u0258/,#;\u01D8/#$+\")(\"'#&'#=.##&&!&'#/($8\":\xA8\"!!)(\"'#&'#"),
    peg$decode("<%;\u0223/L#;\u0258/C$;\u01D8/:$;\u0258/1$;r/($8%:\xAA%! )(%'#($'#(#'#(\"'#&'#=.\" 7\xA9"),
    peg$decode("<%;//' 8!:\xAC!! )=.\" 7\xAB"),
    peg$decode("<%;\x7F.\" &\"/;#;\x81/2$;\u0258/)$8#:\xAE#\"\"!)(#'#(\"'#&'#=.\" 7\xAD"),
    peg$decode("<%;\u01F7/@#;\u0258/7$;\x80.\" &\"/)$8#:\xB0#\"\" )(#'#(\"'#&'#=.\" 7\xAF"),
    peg$decode("<%;\u0227/D#;\u0258/;$;\u0224/2$;\u0258/)$8$:\xB2$\"#!)($'#(#'#(\"'#&'#=.\" 7\xB1"),
    peg$decode(";\x92.S &;\u010B.M &;\u0172.G &;\x83.A &;\x82.; &;\x8C.5 &;\x86./ &;\x8A.) &;\x8B.# &;\x9C"),
    peg$decode("<%;\u01DF.# &;\u01F2/@#;\u0258/7$;\x84.\" &\"/)$8#:\xB4#\"\" )(#'#(\"'#&'#=.\" 7\xB3"),
    peg$decode("<%;\u01D6/^#;\u0258/U$;\x85.\" &\"/G$;\x84.\" &\"/9$;\x88.\" &\"/+$8%:\xB6%$$\"! )(%'#($'#(#'#(\"'#&'#=.\" 7\xB5"),
    peg$decode("%;\u023E/1#;\u0258/($8\":\xB7\"!!)(\"'#&'#"),
    peg$decode("%;\u01EA.) &;\u0203.# &;\u01F5/1#;\u0258/($8\":\xB8\"!!)(\"'#&'#"),
    peg$decode("<%;\u0233/N#;\u0258/E$;\x84.\" &\"/7$;\x87.\" &\"/)$8$:\xBA$\"# )($'#(#'#(\"'#&'#=.\" 7\xB9"),
    peg$decode("<%%;\u023D/,#;\u0258/#$+\")(\"'#&'#.\" &\"/?#;\x89.\" &\"/1$;\x88/($8#:p#! )(#'#(\"'#&'#=.\" 7\xBB"),
    peg$decode("%;\u0193/1#;\u0258/($8\":\xBC\"!!)(\"'#&'#"),
    peg$decode("%;\u0236/1#;\u0258/($8\":\xBD\"!!)(\"'#&'#"),
    peg$decode("<%;\x89/2#;\x88/)$8\":\xBF\"\"! )(\"'#&'#=.\" 7\xBE"),
    peg$decode("<%;\u022D/J#;\u0258/A$;\x89.\" &\"/3$;\x88/*$8$:\xC1$##! )($'#(#'#(\"'#&'#=.\" 7\xC0"),
    peg$decode("<%;\x8D/N#;\u018C/E$;\u0258/<$;\x8E/3$;\u0258/*$8%:\xC3%#$#!)(%'#($'#(#'#(\"'#&'#=.\" 7\xC2"),
    peg$decode("<%;\u01CE/D#;\u0258/;$;\u0239/2$;\u0258/)$8$:\xC5$\"#!)($'#(#'#(\"'#&'#=.\" 7\xC4"),
    peg$decode(";\x8F.# &;\x90"),
    peg$decode("<%;\u022E/M#;\u0258/D$;\u023D/;$;\u0258/2$;\u018C/)$8%:\xC7%\"$ )(%'#($'#(#'#(\"'#&'#=.\" 7\xC6"),
    peg$decode("<%;\u01CB/I#;\u0258/@$;\x91.\" &\"/2$;\u011C/)$8$:\xC9$\"# )($'#(#'#(\"'#&'#=.\" 7\xC8"),
    peg$decode("%;\u01DE/1#;\u0258/($8\":\xBD\"!!)(\"'#&'#"),
    peg$decode("%;\x93/2#;\xAD/)$8\":\xCA\"\"! )(\"'#&'#"),
    peg$decode("<%;\x94.\" &\"/1#;\u0258/($8\":*\"!!)(\"'#&'#=.\" 7\xCB"),
    peg$decode("%;\u024B/J#;\u0258/A$;\x95.\" &\"/3$;\x96/*$8$:\xCC$##! )($'#(#'#(\"'#&'#"),
    peg$decode("%;\u0229/1#;\u0258/($8\":\xBD\"!!)(\"'#&'#"),
    peg$decode("%;\x98/B#;\u0258/9$$;\x970#*;\x97&/)$8#:\xCD#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u01B3/:#;\x98/1$;\u0258/($8#:\x97#!!)(#'#(\"'#&'#"),
    peg$decode("<%;\u0198/2#;\x99/)$8\":\xCF\"\"! )(\"'#&'#=.\" 7\xCE"),
    peg$decode("%;\u01D1/:#;\u0258/1$;\x9A/($8#:\xD0#! )(#'#(\"'#&'#"),
    peg$decode("%;\u01B1/C#;\x9B/:$;\u0258/1$;\u01B2/($8$: $!\")($'#(#'#(\"'#&'#"),
    peg$decode("%;\x93/2#;\xAE/)$8\":\xD1\"\"! )(\"'#&'#"),
    peg$decode(";\x9D.; &;\x9F.5 &;\xA0./ &;\xA2.) &;\xA4.# &;\xA6"),
    peg$decode("<%;\u01D3/\x8B#;\u0258/\x82$%;\u01E7/,#;\u0258/#$+\")(\"'#&'#.\" &\"/a$;q/X$;\u0258/O$;\u01D1/F$;\u0258/=$;\x9E/4$;\u0258/+$8):\xD3)$(&%!)()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\xD2"),
    peg$decode(";\u018A.) &;-.# &;?"),
    peg$decode("<%;\u01ED/f#;\u0258/]$%;\u01E7/,#;\u0258/#$+\")(\"'#&'#.\" &\"/<$;\x9E/3$;\u0258/*$8%:\xD5%#$\"!)(%'#($'#(#'#(\"'#&'#=.\" 7\xD4"),
    peg$decode("<%;\u0244/@#;\u0258/7$;\xA1.\" &\"/)$8#:\xD7#\"\" )(#'#(\"'#&'#=.\" 7\xD6"),
    peg$decode("%;\u018A/1#;\u0258/($8\":\xD8\"!!)(\"'#&'#"),
    peg$decode("<%;\u01CF/@#;\u0258/7$;\xA3.\" &\"/)$8#:\xDA#\"\" )(#'#(\"'#&'#=.\" 7\xD9"),
    peg$decode("%;\u018C.) &;\u0194.# &;\u018A/1#;\u0258/($8\":\xDB\"!!)(\"'#&'#"),
    peg$decode("<%;\u022C/I#;\u0258/@$;\xA5.\" &\"/2$;\u0258/)$8$:\xDA$\"#!)($'#(#'#(\"'#&'#=.\" 7\xDC"),
    peg$decode("%;\u018C.) &;\u0194.# &;\u0192/1#;\u0258/($8\":\xDD\"!!)(\"'#&'#"),
    peg$decode("<%;\u0225/S#;\u0258/J$;\u0197/A$;\u0258/8$;\xA7.\" &\"/*$8%:\xDF%#$\" )(%'#($'#(#'#(\"'#&'#=.\" 7\xDE"),
    peg$decode("%;\u01B1/C#;\xA8/:$;\u0258/1$;\u01B2/($8$:\xE0$!\")($'#(#'#(\"'#&'#.D &%;\u01BD/:#;\xA8/1$;\u0258/($8#:\xE0#!!)(#'#(\"'#&'#"),
    peg$decode(";\xAA.) &;\xA9.# &;\xAC"),
    peg$decode(";5.) &;/.# &;3"),
    peg$decode("%;\xAB/<#9:\xE1 ! -\"\"&!&#/($8\":\xE2\"!!)(\"'#&'#"),
    peg$decode("%$;\u01A4/&#0#*;\u01A4&&&#/' 8!:\xE3!! )"),
    peg$decode("%;\xAB/' 8!:\xE4!! )"),
    peg$decode(";\xAE./ &;\xE8.) &;\u0101.# &;\u0109"),
    peg$decode("<%;\xB8/p#;\u0258/g$;\xB3.\" &\"/Y$;\u0258/P$;\xB4.\" &\"/B$;\u0258/9$;\xAF.\" &\"/+$8':\xE6'$&$\" )(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\xE5"),
    peg$decode("<%;\u024A/C#;\u0258/:$;\xB0/1$;\u0258/($8$:\xE8$!!)($'#(#'#(\"'#&'#=.\" 7\xE7"),
    peg$decode("%;\xB2/B#;\u0258/9$$;\xB10#*;\xB1&/)$8#:\xCD#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u01B3/:#;\xB2/1$;\u0258/($8#:-#!!)(#'#(\"'#&'#"),
    peg$decode("%;y/M#;\u0258/D$;\u01D1/;$;\u0258/2$;z/)$8%:\xE9%\"$ )(%'#($'#(#'#(\"'#&'#"),
    peg$decode("<%;\u0220/L#;\u0258/C$;\u01D8/:$;\u0258/1$;\xE2/($8%:\xEB%! )(%'#($'#(#'#(\"'#&'#=.\" 7\xEA"),
    peg$decode("<%;\u0214/S#;\u0258/J$;q/A$;\u0258/8$;\xB5.\" &\"/*$8%:\xED%#$\" )(%'#($'#(#'#(\"'#&'#=.\" 7\xEC"),
    peg$decode("<%;\xB6/2#;q/)$8\":\xEF\"\"! )(\"'#&'#=.\" 7\xEE"),
    peg$decode(";\xB7.# &;\u01B3"),
    peg$decode("%;\u021D/1#;\u0258/($8\":\xBD\"!!)(\"'#&'#"),
    peg$decode("%;\xBA/B#;\u0258/9$$;\xB90#*;\xB9&/)$8#:\xF0#\"\" )(#'#(\"'#&'#"),
    peg$decode("<%;\xFE/D#;\u0258/;$;\xBA/2$;\u0258/)$8$:\xF2$\"#!)($'#(#'#(\"'#&'#=.\" 7\xF1"),
    peg$decode(";\xBB.# &;\xE1"),
    peg$decode("%;\xBC/U#;\xC2.\" &\"/G$;\xC3.\" &\"/9$;\xC4.\" &\"/+$8$:\xF3$$#\"! )($'#(#'#(\"'#&'#"),
    peg$decode("<%;\u0237/R#;\u0258/I$;\xBD.\" &\"/;$;\u0258/2$;\xC0/)$8%:\xF5%\"\" )(%'#($'#(#'#(\"'#&'#=.\" 7\xF4"),
    peg$decode("<;\xBE.# &;\xBF=.\" 7\xF6"),
    peg$decode("%;\u01EE/1#;\u0258/($8\":\xF7\"!!)(\"'#&'#"),
    peg$decode("%;\u01CD/1#;\u0258/($8\":\xF8\"!!)(\"'#&'#"),
    peg$decode("%;\xC6/B#;\u0258/9$$;\xC10#*;\xC1&/)$8#:\xCD#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u01B3/:#;\xC6/1$;\u0258/($8#:-#!!)(#'#(\"'#&'#"),
    peg$decode("<%;\u01FC/D#;\u0258/;$;\xCA/2$;\u0258/)$8$:\xFA$\"#!)($'#(#'#(\"'#&'#=.\" 7\xF9"),
    peg$decode("<%;\u0249/D#;\u0258/;$;q/2$;\u0258/)$8$:\xFC$\"#!)($'#(#'#(\"'#&'#=.\" 7\xFB"),
    peg$decode("<%;\u01FF/e#;\u0258/\\$;\u01D8/S$;\u0258/J$;r/A$;\u0258/8$;\xC5.\" &\"/*$8':\xFE'#&\" )(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\xFD"),
    peg$decode("<%;\u0200/D#;\u0258/;$;q/2$;\u0258/)$8$:\u0100$\"#!)($'#(#'#(\"'#&'#=.\" 7\xFF"),
    peg$decode(";\xC7.# &;\xC9"),
    peg$decode("%;\xC8.\" &\"/2#;\xE6/)$8\":\u0101\"\"! )(\"'#&'#"),
    peg$decode("%;\u01A6/2#;\u01B4/)$8\":\u0102\"\"! )(\"'#&'#"),
    peg$decode("%;q/@#;\u0258/7$;\xD7.\" &\"/)$8#:\u0103#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\xCE/B#;\u0258/9$$;\xCB0#*;\xCB&/)$8#:\u0104#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\xCC.# &;\xCD/7#;\xDE.\" &\"/)$8\":\u0105\"\"! )(\"'#&'#"),
    peg$decode("<%;\u01B3/:#;\xCE/1$;\u0258/($8#:\u0107#!!)(#'#(\"'#&'#=.\" 7\u0106"),
    peg$decode("<%;\xD8/D#;\u0258/;$;\xCE/2$;\u0258/)$8$:\u0109$\"#!)($'#(#'#(\"'#&'#=.\" 7\u0108"),
    peg$decode(";\xD5.5 &;?./ &;\xCF.) &;\xD0.# &;\xD6"),
    peg$decode("%;\u018B/S#;\u0258/J$;\xFC/A$;\u0258/8$;\xD7.\" &\"/*$8%:\u010A%#$\" )(%'#($'#(#'#(\"'#&'#"),
    peg$decode("<%;\xD1/@#;\u0258/7$;\xD2.\" &\"/)$8#:\u010C#\"\" )(#'#(\"'#&'#=.\" 7\u010B"),
    peg$decode("<%;\u018C/@#;\u0258/7$;\xD7.\" &\"/)$8#:\u010E#\"\" )(#'#(\"'#&'#=.\" 7\u010D"),
    peg$decode("<;\xD3.# &;\xD4=.\" 7\u010F"),
    peg$decode("%;\u0206/V#;\u0258/M$;\u01D8/D$;\u0258/;$;\u0194/2$;\u0258/)$8&:\u0110&\"%!)(&'#(%'#($'#(#'#(\"'#&'#"),
    peg$decode("%;l/;#;\u0206/2$;\u0258/)$8#:\u0111#\"\"!)(#'#(\"'#&'#"),
    peg$decode("<%;\u01B1/R#;\xCA/I$;\u0258/@$;\u01B2/7$;\xD7.\" &\"/)$8%:\u0113%\"# )(%'#($'#(#'#(\"'#&'#=.\" 7\u0112"),
    peg$decode("<%;\x9A/7#;\xD7.\" &\"/)$8\":\u0115\"\"! )(\"'#&'#=.\" 7\u0114"),
    peg$decode("<%%;\u01D1/Q#%%<;\u01A4.# &;\u024F=.##&&!&'#/,#;\u0258/#$+\")(\"'#&'#/#$+\")(\"'#&'#.\" &\"/;#;\u01A6/2$;\u0258/)$8#:\u0117#\"\"!)(#'#(\"'#&'#=.\" 7\u0116"),
    peg$decode("<%;\xD9.\" &\"/J#;\u0258/A$;\xDA.\" &\"/3$;\u020F/*$8$:\u0119$##! )($'#(#'#(\"'#&'#=.\" 7\u0118"),
    peg$decode("%;\u0216/1#;\u0258/($8\":\x94\"!!)(\"'#&'#"),
    peg$decode(";\xDB.# &;\xDD"),
    peg$decode("%;\u0212.) &;\u0232.# &;\u01FD/@#;\u0258/7$;\xDC.\" &\"/)$8#:\u011A#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u0221/1#;\u0258/($8\":\u011B\"!!)(\"'#&'#"),
    peg$decode("%;\u0208.# &;\u01E3/1#;\u0258/($8\":\u011B\"!!)(\"'#&'#"),
    peg$decode("<%;\xDF.# &;\xE0/1#;\u0258/($8\":\u011D\"!!)(\"'#&'#=.\" 7\u011C"),
    peg$decode("<%;\u021E/;#;\u0258/2$;q/)$8#:\u011F#\"\" )(#'#(\"'#&'#=.\" 7\u011E"),
    peg$decode("<%;\u0243/;#;\u0258/2$;\xF5/)$8#:\u0121#\"\" )(#'#(\"'#&'#=.\" 7\u0120"),
    peg$decode("<%;\u0245/;#;\u0258/2$;\xFA/)$8#:\u0123#\"\" )(#'#(\"'#&'#=.\" 7\u0122"),
    peg$decode("%;\xE4/B#;\u0258/9$$;\xE30#*;\xE3&/)$8#:\u0124#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u01B3/:#;\xE4/1$;\u0258/($8#:\u0125#!!)(#'#(\"'#&'#"),
    peg$decode("<%;q/X#;\u0258/O$;\u013F.\" &\"/A$;\u0258/8$;\xE5.\" &\"/*$8%:\u0127%#$\" )(%'#($'#(#'#(\"'#&'#=.\" 7\u0126"),
    peg$decode("%;\u021B/@#;\u0258/7$;\u01F9.# &;\u0211/($8#:\u0128#! )(#'#(\"'#&'#"),
    peg$decode("<;\u01B5=.\" 7\u0129"),
    peg$decode("<;\u022F.5 &;\u0233./ &;\u01C9.) &;\u01F8.# &;\u0202=.\" 7\u012A"),
    peg$decode("<%;\xEA/k#;\u0258/b$;\xEE/Y$;\u0258/P$;\xF2.\" &\"/B$;\u0258/9$;\xE9.\" &\"/+$8':\u012C'$&$\" )(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u012B"),
    peg$decode("<%;\u0231/:#;\u0258/1$;\xC0/($8#:\u012E#! )(#'#(\"'#&'#=.\" 7\u012D"),
    peg$decode(";\xEB.# &;\xEC"),
    peg$decode("<%;\u0209/@#;\u0258/7$;\xED.\" &\"/)$8#:\u0130#\"\" )(#'#(\"'#&'#=.\" 7\u012F"),
    peg$decode("<%;\u022F/1#;\u0258/($8\":\u0132\"!!)(\"'#&'#=.\" 7\u0131"),
    peg$decode("<%;\u021F/;#;\u0258/2$;\xE7/)$8#:\u0134#\"\" )(#'#(\"'#&'#=.\" 7\u0133"),
    peg$decode("%;\xEF/2#;\xF1/)$8\":\u0135\"\"! )(\"'#&'#"),
    peg$decode("<%;\xF0/2#;\u0198/)$8\":\u0137\"\"! )(\"'#&'#=.\" 7\u0136"),
    peg$decode("<%;\u020C/,#;\u0258/#$+\")(\"'#&'#=.\" 7\u0138"),
    peg$decode("<%;\xF8.) &;\x9B.# &;\xFD/1#;\u0258/($8\":\u0139\"!!)(\"'#&'#=.\" 7\u0122"),
    peg$decode("<%;\u0141/j#;\u0258/a$;\xF4.\" &\"/S$;\u0258/J$3\u013B\"\"5\"7\u013C/;$;\u0258/2$;\xF3/)$8':\u013D'\"$ )(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u013A"),
    peg$decode("<%;\u0102/S#;\u0258/J$;\u0104/A$;\u0258/8$;\xC3.\" &\"/*$8%:\u013F%#$\" )(%'#($'#(#'#(\"'#&'#.5 &%3\u0140\"\"5'7\u0141/' 8!:\u0142!! )=.\" 7\u013E"),
    peg$decode("<%;\u0138/@#;\u0258/7$;\xC3.\" &\"/)$8#:\u0144#\"\" )(#'#(\"'#&'#.V &%;\u021E/L#;\u0258/C$;\u01E1/:$;\u0258/1$;\u0189/($8%:\u0145%! )(%'#($'#(#'#(\"'#&'#=.\" 7\u0143"),
    peg$decode("<%;\u01B1/T#;\xF7/K$;\u0258/B$$;\xF60#*;\xF6&/2$;\u01B2/)$8%:\u0147%\"#!)(%'#($'#(#'#(\"'#&'#=.\" 7\u0146"),
    peg$decode("%;\u01B3/:#;\xF7/1$;\u0258/($8#:\u0148#!!)(#'#(\"'#&'#"),
    peg$decode("<%;\u0189/' 8!:\u014A!! )=.\" 7\u0149"),
    peg$decode("<%;\xF9/2#;\xFA/)$8\":\u014B\"\"! )(\"'#&'#=.\" 7\u0122"),
    peg$decode("<%;\u0245/1#;\u0258/($8\":\xBD\"!!)(\"'#&'#=.\" 7\u014C"),
    peg$decode("%;\xFC/B#;\u0258/9$$;\xFB0#*;\xFB&/)$8#:\u014D#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u01B3/:#;\xFC/1$;\u0258/($8#:\x97#!!)(#'#(\"'#&'#"),
    peg$decode("<%;\u01B1/C#;r/:$;\u0258/1$;\u01B2/($8$:\u014F$!\")($'#(#'#(\"'#&'#=.\" 7\u014E"),
    peg$decode("<%;\u01E8/;#;\u0258/2$;\u0245/)$8#:\u0151#\"\" )(#'#(\"'#&'#=.\" 7\u0150"),
    peg$decode("<%;\xFF.) &;\u020B.# &;\u01F4/' 8!:\xBD!! )=.\" 7\u0152"),
    peg$decode("<%;\u0240/@#;\u0258/7$;\u0100.\" &\"/)$8#:\u0154#\"\" )(#'#(\"'#&'#=.\" 7\u0153"),
    peg$decode("%;\u01CD/1#;\u0258/($8\":\u0155\"!!)(\"'#&'#"),
    peg$decode("<%;\u0102/\xA2#;\u0103.\" &\"/\x94$;\xD0/\x8B$;\u0258/\x82$;\u0104/y$;\xC3.\" &\"/k$;\xB3.\" &\"/]$;\u0258/T$;\xB4.\" &\"/F$;\u0258/=$;\xE9.\" &\"//$8+:\u0157+(*)(&%$\" )(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0156"),
    peg$decode("<%;\u0242/1#;\u0258/($8\":\xBD\"!!)(\"'#&'#=.\" 7\u0158"),
    peg$decode("<%;\u021F/C#;\u0258/:$;\xE7/1$;\u0258/($8$:\u015A$!!)($'#(#'#(\"'#&'#=.\" 7\u0159"),
    peg$decode("<%;\u0238/C#;\u0258/:$;\u0105/1$;\u0258/($8$:\u015C$!!)($'#(#'#(\"'#&'#=.\" 7\u015B"),
    peg$decode("%;\u0107/9#$;\u01060#*;\u0106&/)$8\":\u014D\"\"! )(\"'#&'#"),
    peg$decode("%;\u0258/:#;\u01B3/1$;\u0107/($8#:\u0148#! )(#'#(\"'#&'#"),
    peg$decode("<%;\u018E/M#;\u0258/D$;\u01BD/;$;\u0108/2$;\u0258/)$8%:\u015E%\"$!)(%'#($'#(#'#(\"'#&'#=.\" 7\u015D"),
    peg$decode("<;q.. &%;\u01E8/& 8!:\u0160! )=.\" 7\u015F"),
    peg$decode("<%;\u010A/\x80#;\xD0/w$;\u0258/n$;\xC3.\" &\"/`$;\xB3.\" &\"/R$;\xB4.\" &\"/D$;\u0258/;$;\xE9.\" &\"/-$8(:\u0162(&'&$#\" )(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u0161"),
    peg$decode("<%;\u01EB/C#;\u0258/:$;\u01FC/1$;\u0258/($8$:\xBD$!#)($'#(#'#(\"'#&'#=.\" 7\u0163"),
    peg$decode("<;\u010D.5 &;\u010E./ &;\u010F.) &;\u0110.# &;\u0111=.\" 7\u0164"),
    peg$decode("%;\u01E2/1#;\u0258/($8\":\xBD\"!!)(\"'#&'#"),
    peg$decode("%%<%;\u010C/>#;\u0205./ &;\u023F.) &;\u0246.# &;\u0247/#$+\")(\"'#&'#=.##&&!&'#/1#;\u0112/($8\":\u0148\"! )(\"'#&'#"),
    peg$decode("%%<%;\u010C/>#;\u0239./ &;\u023F.) &;\u0246.# &;\u0247/#$+\")(\"'#&'#=.##&&!&'#/1#;\u0153/($8\":\u0148\"! )(\"'#&'#"),
    peg$decode("%%<%;\u010C/>#;\u0239./ &;\u0205.) &;\u0246.# &;\u0247/#$+\")(\"'#&'#=.##&&!&'#/1#;\u0157/($8\":\u0148\"! )(\"'#&'#"),
    peg$decode("%%<%;\u010C/>#;\u0239./ &;\u0205.) &;\u023F.# &;\u0247/#$+\")(\"'#&'#=.##&&!&'#/1#;\u0166/($8\":\u0148\"! )(\"'#&'#"),
    peg$decode("%%<%;\u010C/>#;\u0239./ &;\u0205.) &;\u023F.# &;\u0246/#$+\")(\"'#&'#=.##&&!&'#/1#;\u016A/($8\":\u0148\"! )(\"'#&'#"),
    peg$decode("<%;\u0113/T#;\u0115.\" &\"/F$;\u018C/=$;\u0258/4$;\u0116/+$8%:\u0166%$$#\" )(%'#($'#(#'#(\"'#&'#=.\" 7\u0165"),
    peg$decode("%;\u010C/J#;\u0114.\" &\"/<$;\u0239/3$;\u0258/*$8$:\u0167$##\"!)($'#(#'#(\"'#&'#"),
    peg$decode("%;\u023B.# &;\u023A/1#;\u0258/($8\":\u0168\"!!)(\"'#&'#"),
    peg$decode("<%;\u0201/N#;\u0258/E$;l/<$;\u01F6/3$;\u0258/*$8%:\u016A%#$\"!)(%'#($'#(#'#(\"'#&'#=.\" 7\u0169"),
    peg$decode(";\u0117.# &;\u0152"),
    peg$decode("<%;\u01B1/Z#;\u0119/Q$$;\u011B0#*;\u011B&/A$;\u01B2/8$;\u0118.\" &\"/*$8%:\u016C%##\" )(%'#($'#(#'#(\"'#&'#=.\" 7\u016B"),
    peg$decode("%;\u024C/D#;\u0258/;$;\u0235/2$;\u0258/)$8$:\u016D$\"#!)($'#(#'#(\"'#&'#"),
    peg$decode("%;\u011C/B#;\u0258/9$$;\u011A0#*;\u011A&/)$8#:\u014D#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u01B3/:#;\u011C/1$;\u0258/($8#:\xB7#!!)(#'#(\"'#&'#"),
    peg$decode("%;\u01B3.\" &\"/1#;\u0130/($8\":\u016E\"! )(\"'#&'#"),
    peg$decode("<%;\u011D/O#;\u0258/F$;\u011E.\" &\"/8$;\u011F.\" &\"/*$8$:\u0170$##! )($'#(#'#(\"'#&'#=.\" 7\u016F"),
    peg$decode("%;\u01A6/=#%<;\u0258=/##&'!&&#/($8\":p\"!!)(\"'#&'#.\\ &%%<;\u011E.) &;\u0121.# &;\u0130=.##&&!&'#/:#;\u0258/1$;\u01A9/($8#:p#! )(#'#(\"'#&'#"),
    peg$decode("<%;&/1#;\u0258/($8\":\u0172\"!!)(\"'#&'#=.\" 7\u0171"),
    peg$decode("%;\u0121/B#$;\u01200#*;\u0120&/2$;\u0258/)$8#:\u014D#\"\"!)(#'#(\"'#&'#"),
    peg$decode("%;\u0258/1#;\u0121/($8\":\u0148\"! )(\"'#&'#"),
    peg$decode("<%;\u0122.\" &\"/A#;\u0124/8$;\u0122.\" &\"/*$8#:\u0174##\"! )(#'#(\"'#&'#=.\" 7\u0173"),
    peg$decode("%$;\u0123/&#0#*;\u0123&&&#/' 8!:\u0175!! )"),
    peg$decode("<%;\u01E1/C#;\u0258/:$;\u01A6/1$;\u0258/($8$:\u0177$!!)($'#(#'#(\"'#&'#=.\" 7\u0176"),
    peg$decode(";\u0126.; &;\u0129.5 &;\u012C./ &;\u012D.) &;\u012F.# &;\u0125"),
    peg$decode("<%;\u0145/' 8!:\u0179!! )=.\" 7\u0178"),
    peg$decode("<%;\u0127/U#;\u013F.\" &\"/G$;\u0140.\" &\"/9$;\u0128.\" &\"/+$8$:\u017B$$#\"! )($'#(#'#(\"'#&'#=.\" 7\u017A"),
    peg$decode("<%;\u0226.# &;\u0225/D#;\u0258/;$;\u0210/2$;\u0258/)$8$:\u017D$\"#!)($'#(#'#(\"'#&'#=.\" 7\u017C"),
    peg$decode("<%;\u01D4/1#;\u0258/($8\":\u017F\"!!)(\"'#&'#=.\" 7\u017E"),
    peg$decode("%;\u012A/@#;\u0140.\" &\"/2$;\u0258/)$8#:\u0180#\"\"!)(#'#(\"'#&'#"),
    peg$decode("<%;\u012B.# &;\u0241/1#;\u0258/($8\":\u011B\"!!)(\"'#&'#=.\" 7\u0181"),
    peg$decode("<%;l.\" &\"/2#;\u021A/)$8\":\u0183\"\"! )(\"'#&'#=.\" 7\u0182"),
    peg$decode("<;\u0142=.\" 7\u0184"),
    peg$decode("<%;\u01E8/D#;\u0258/;$;\u012E/2$;\u0258/)$8$:\u0186$\"#!)($'#(#'#(\"'#&'#=.\" 7\u0185"),
    peg$decode(";L./ &;5.) &;,.# &;3"),
    peg$decode("<%;\u013D/' 8!:\u0188!! )=.\" 7\u0187"),
    peg$decode("<%;\u0122.\" &\"/J#;\u0131/A$;\u0258/8$;\u0122.\" &\"/*$8$:\u018A$##\" )($'#(#'#(\"'#&'#=.\" 7\u0189"),
    peg$decode(";\u0143.) &;\u0133.# &;\u0132"),
    peg$decode("<%;\u0142/' 8!:\u018C!! )=.\" 7\u018B"),
    peg$decode("<%;\u0134/J#;\u0258/A$;\u0139/8$;\u0140.\" &\"/*$8$:\u018E$##! )($'#(#'#(\"'#&'#=.\" 7\u018D"),
    peg$decode("%;\u0135.# &;\u0136/1#;\u0258/($8\":\u018F\"!!)(\"'#&'#"),
    peg$decode("<%;\u0226/;#;\u0258/2$;\u0210/)$8#:\u0190#\"\" )(#'#(\"'#&'#=.\" 7\u017C"),
    peg$decode("<%;\u0241/' 8!:\u0192!! )=.\" 7\u0191"),
    peg$decode("%;\u01B1/T#;\u013B/K$;\u0258/B$$;\u013A0#*;\u013A&/2$;\u01B2/)$8%:\u0193%\"#!)(%'#($'#(#'#(\"'#&'#"),
    peg$decode("%;\u0137/' 8!:\u0194!! )"),
    peg$decode("%;\u0137/' 8!:\u0195!! )"),
    peg$decode("%;\u01B3/:#;\u013B/1$;\u0258/($8#:\u0148#!!)(#'#(\"'#&'#"),
    peg$decode("<%;\u013C/O#;\u0258/F$;\u013F.\" &\"/8$;\u0128.\" &\"/*$8$:\u0197$##! )($'#(#'#(\"'#&'#=.\" 7\u0196"),
    peg$decode("%;\xF7/\\#%<%;\u0258/8#;\u01C4.) &;\u01B2.# &;\u013F/#$+\")(\"'#&'#=/##&'!&&#/($8\":p\"!!)(\"'#&'#.# &;q"),
    peg$decode("<%$;\u013E/&#0#*;\u013E&&&#/' 8!:\u0199!! )=.\" 7\u0198"),
    peg$decode("%;\u01DD/C#;\u0258/:$;\u0192/1$;\u0258/($8$:p$!!)($'#(#'#(\"'#&'#"),
    peg$decode("<%;\u01D2.# &;\u01EC/1#;\u0258/($8\":\u019B\"!!)(\"'#&'#=.\" 7\u019A"),
    peg$decode("%;\u0141/;#;\xE7/2$;\u0258/)$8#:\u019C#\"\"!)(#'#(\"'#&'#"),
    peg$decode("<%;\u021E/D#;\u0258/;$;\u01E0/2$;\u0258/)$8$:\u019E$\"#!)($'#(#'#(\"'#&'#=.\" 7\u019D"),
    peg$decode("%;\u01DC/;#;\u0258/2$;L/)$8#:\u019F#\"\" )(#'#(\"'#&'#"),
    peg$decode("<%;\u0144/E#;\xF5/<$;\u0145/3$;\u0258/*$8$:\u01A1$##\"!)($'#(#'#(\"'#&'#=.\" 7\u01A0"),
    peg$decode("<%;\u01FB/D#;\u0258/;$;\u0210/2$;\u0258/)$8$:\u01A3$\"#!)($'#(#'#(\"'#&'#=.\" 7\u01A2"),
    peg$decode("%;\u0146/F#;\u0147.\" &\"/8$;\u0150.\" &\"/*$8#:\u01A4##\"! )(#'#(\"'#&'#"),
    peg$decode("<%;\u022A/D#;\u0258/;$;\u0198/2$;\u0258/)$8$:\u01A6$\"#!)($'#(#'#(\"'#&'#=.\" 7\u01A5"),
    peg$decode("%;\u0149/B#;\u0258/9$$;\u01480#*;\u0148&/)$8#:\u01A7#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u0149/1#;\u0258/($8\":\u0155\"!!)(\"'#&'#"),
    peg$decode("<;\u014A.# &;\u014F=.\" 7\u01A8"),
    peg$decode("%;\u021E/T#;\u0258/K$;\u01EB.# &;\u0242/<$;\u0258/3$;\u014B/*$8%:\u01A9%#$\" )(%'#($'#(#'#(\"'#&'#"),
    peg$decode("<;\u014C.) &;\u014D.# &;\u014E=.\" 7\u01AA"),
    peg$decode("%;\u0238/J#;\u0258/A$;\u021A.# &;\u01E8/2$;\u0258/)$8$:\u01AB$\"#!)($'#(#'#(\"'#&'#"),
    peg$decode("%;\u01D9.# &;\u0230/1#;\u0258/($8\":\u01AC\"!!)(\"'#&'#"),
    peg$decode("%;\u0217/D#;\u0258/;$;\u01CA/2$;\u0258/)$8$:\u01AD$\"#!)($'#(#'#(\"'#&'#"),
    peg$decode("%;\u0215/D#;\u0258/;$;\u01A6/2$;\u0258/)$8$:\u01AE$\"#!)($'#(#'#(\"'#&'#"),
    peg$decode("<%;l.\" &\"/J#;\u01E9/A$;\u0258/8$;\u0151.\" &\"/*$8$:\u01B0$##\" )($'#(#'#(\"'#&'#=.\" 7\u01AF"),
    peg$decode("%;\u0207/J#;\u0258/A$;\u01EA.# &;\u0203/2$;\u0258/)$8$:\u01B1$\"#!)($'#(#'#(\"'#&'#"),
    peg$decode("%;\u0169/' 8!:\u01B2!! )"),
    peg$decode("<%;\u0154/c#;\u0115.\" &\"/U$;\u0194/L$;\u0258/C$;\u0156/:$;\xC3.\" &\"/,$8&:\u01B4&%%$#! )(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u01B3"),
    peg$decode("%;\u010C/J#;\u0155.\" &\"/<$;\u0205/3$;\u0258/*$8$:\u01B5$##\"!)($'#(#'#(\"'#&'#"),
    peg$decode("%;\u0241/1#;\u0258/($8\":\u01B6\"!!)(\"'#&'#"),
    peg$decode("<%;\u021E/N#;\u0258/E$;\u018C/<$;\u0258/3$;\u0138/*$8%:\u01B8%#$\" )(%'#($'#(#'#(\"'#&'#=.\" 7\u01B7"),
    peg$decode("<%;\u0158/\xA6#;\u0115.\" &\"/\x98$;\u0195.\" &\"/\x8A$;\u0258/\x81$;\u0159/x$;\u021E/o$;\u0258/f$;\u018C/]$;\u0258/T$;\u0161.\" &\"/F$;\u0162.\" &\"/8$;\u0163//$8,:\u01BA,(+*)'$\"! )(,'#(+'#(*'#()'#(('#(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u01B9"),
    peg$decode("%;\u010C/J#;\u0114.\" &\"/<$;\u023F/3$;\u0258/*$8$:\u01BB$##\"!)($'#(#'#(\"'#&'#"),
    peg$decode("<%;\u015A.\" &\"/2#;\u015C/)$8\":\u01BD\"\"! )(\"'#&'#=.\" 7\u01BC"),
    peg$decode("%;\u01D5.) &;\u01CC.# &;\u015B/1#;\u0258/($8\":\u01BE\"!!)(\"'#&'#"),
    peg$decode("%;\u020A/;#;\u0258/2$;\u021C/)$8#:\u01BF#\"\" )(#'#(\"'#&'#"),
    peg$decode("<;\u015D.# &;\u015E=.\" 7\u01C0"),
    peg$decode("%;\u01EB.# &;\u0209/1#;\u0258/($8\":\u01C1\"!!)(\"'#&'#"),
    peg$decode("%;\u0242/@#;\u0258/7$;\u015F.\" &\"/)$8#:\u01C2#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u021C/;#;\u0258/2$;\u0160/)$8#:\u01C3#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\xF7/B#;\u0258/9$$;\xF60#*;\xF6&/)$8#:\u014D#\"\" )(#'#(\"'#&'#"),
    peg$decode("%;\u01FA/c#;\u0258/Z$;\u01F0/Q$;\u0258/H$;\u0234.) &3\u01C4\"\"5)7\u01C5/3$;\u0258/*$8&:\u01C6&#%#!)(&'#(%'#($'#(#'#(\"'#&'#"),
    peg$decode("<%;\u0248/D#;\u0258/;$;q/2$;\u0258/)$8$:\u01C7$\"#!)($'#(#'#(\"'#&'#=.\" 7\x88"),
    peg$decode("<%;\u01D6/W#;\u0258/N$;\u0164/E$;\u0258/<$;\u01F2/3$;\u0258/*$8&:\u01C9&#%#!)(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u01C8"),
    peg$decode("%$;\u0165/&#0#*;\u0165&&&#/' 8!:\u01CA!! )"),
    peg$decode("%;\x92/:#;\u0258/1$;$/($8#:\"#!\")(#'#(\"'#&'#"),
    peg$decode("<%;\u0168/T#;\u0115.\" &\"/F$;\u0167/=$;\u0258/4$;\u0169/+$8%:\u01CC%$$#\" )(%'#($'#(#'#(\"'#&'#=.\" 7\u01CB"),
    peg$decode("%;\u0196/;#;\u0258/2$;\xF5/)$8#:\u01CD#\"\" )(#'#(\"'#&'#.# &;\u0196"),
    peg$decode("%;\u010C/J#;\u0114.\" &\"/<$;\u0246/3$;\u0258/*$8$:\u01CE$##\"!)($'#(#'#(\"'#&'#"),
    peg$decode("%;\u01D1/D#;\u0258/;$;\xAE/2$;\u0258/)$8$:\u014B$\"#!)($'#(#'#(\"'#&'#"),
    peg$decode("<%;\u016B/f#;\u0115.\" &\"/X$;\u018C/O$;\u0258/F$;\u0243/=$;\u0258/4$;\u016C/+$8':\u01D0'$&%$ )(''#(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u01CF"),
    peg$decode("%;\u010C/N#;\u0247/E$;\u0258/<$;\u0239/3$;\u0258/*$8%:\u01D1%#$#!)(%'#($'#(#'#(\"'#&'#"),
    peg$decode("%;\u01A8/@#;\u0258/7$;\u016D.\" &\"/)$8#:\u01D2#\"\" )(#'#(\"'#&'#"),
    peg$decode("<%;\u01B1/Z#;\u0258/Q$;\u016E.\" &\"/C$;\u0258/:$;\u01B2/1$;\u0258/($8&:\u01D4&!#)(&'#(%'#($'#(#'#(\"'#&'#=.\" 7\u01D3"),
    peg$decode("%;\u0170/9#$;\u016F0#*;\u016F&/)$8\":\u01D5\"\"! )(\"'#&'#"),
    peg$decode("%;\u0258/H#;\u01B3/?$;\u0258/6$;\u0170.\" &\"/($8$:\u01D6$! )($'#(#'#(\"'#&'#"),
    peg$decode("%%<%;\u01A6/;#;\u0258/2$;&.# &;\u0121/#$+#)(#'#(\"'#&'#=.##&&!&'#/:#;q/1$;\u0258/($8#:\u014F#!!)(#'#(\"'#&'#.x &%;\u0171/n#%%<;\u01A4=.##&&!&'#/,#;\u0258/#$+\")(\"'#&'#/F$;\u011E.\" &\"/8$;\u011F.\" &\"/*$8$:\u0170$##! )($'#(#'#(\"'#&'#"),
    peg$decode(";\u01A6.# &;\u01A9"),
    peg$decode("<%;\u0173/;#;\u018C/2$;\u0258/)$8#:\u01D8#\"\"!)(#'#(\"'#&'#=.\" 7\u01D7"),
    peg$decode("<%;\u01EF/J#;\u0258/A$;\u0174/8$;\u0175.\" &\"/*$8$:\u01DA$##! )($'#(#'#(\"'#&'#=.\" 7\u01D9"),
    peg$decode("<%;\u0239./ &;\u0205.) &;\u023F.# &;\u0246/1#;\u0258/($8\":\u011B\"!!)(\"'#&'#=.\" 7\u01DB"),
    peg$decode("<%;\u0201/D#;\u0258/;$;\u01F6/2$;\u0258/)$8$:\u01DD$\"#!)($'#(#'#(\"'#&'#=.\" 7\u01DC"),
    peg$decode("<%;\u01BF/,#;\u01BF/#$+\")(\"'#&'#=.\" 7\u01DE"),
    peg$decode("<;\u01BB=.\" 7\u01DF"),
    peg$decode("<;\u01BC=.\" 7\u01E0"),
    peg$decode("<;\u01B5=.\" 7\u01E1"),
    peg$decode("<;\u01C6=.\" 7\u01E2"),
    peg$decode("<;\u01C0=.\" 7\u01E3"),
    peg$decode("<%;\u01C1/,#;\u01C1/#$+\")(\"'#&'#=.\" 7\u01E4"),
    peg$decode("<%;\u01C2/,#;\u01C2/#$+\")(\"'#&'#=.\" 7\u01E5"),
    peg$decode("<;\u01BE=.\" 7\u01E6"),
    peg$decode("<;\u01BF=.\" 7\u01E7"),
    peg$decode("<;\u01C1=.\" 7\u01E8"),
    peg$decode("<;\u01C2=.\" 7\u01E9"),
    peg$decode("<%;\u01C1/,#;\u01BD/#$+\")(\"'#&'#=.\" 7\u01EA"),
    peg$decode("<%;\u01C2/,#;\u01BD/#$+\")(\"'#&'#=.\" 7\u01EB"),
    peg$decode("<%;\u01BD/1#;\u01BD.\" &\"/#$+\")(\"'#&'#=.\" 7\u01EC"),
    peg$decode("<%;\u01C3/,#;\u01BD/#$+\")(\"'#&'#=.\" 7\u01ED"),
    peg$decode("<%;\u01C1/,#;\u01C2/#$+\")(\"'#&'#=.\" 7\u01ED"),
    peg$decode("<%$;\u01C8/&#0#*;\u01C8&&&#/<#9:\u01EF ! -\"\"&!&#/($8\":\u01F0\"!!)(\"'#&'#=.\" 7\u01EE"),
    peg$decode("<%;\u020D/@#;\u0258/7$;l.\" &\"/)$8#:\u01F2#\"\" )(#'#(\"'#&'#=.\" 7\u01F1"),
    peg$decode("<;\u01A6.# &;\u01A9=.\" 7\u01F3"),
    peg$decode("<%;\u0189/' 8!:\u01F5!! )=.\" 7\u01F4"),
    peg$decode("<%;\u018D.\" &\"/2#;\u0189/)$8\":\u01F7\"\"! )(\"'#&'#=.\" 7\u01F6"),
    peg$decode("<%;\u018D.\" &\"/2#;\u0189/)$8\":\u01F9\"\"! )(\"'#&'#=.\" 7\u01F8"),
    peg$decode("%;\u0189/2#;\u01B4/)$8\":\u01FA\"\"! )(\"'#&'#"),
    peg$decode("<%;\u0190.) &;\u0191.# &;\u018F/2#;\u0189/)$8\":\u01FC\"\"! )(\"'#&'#=.\" 7\u01FB"),
    peg$decode("%;\u0258/& 8!:\u01FD! )"),
    peg$decode("%;\u018D/2#;\u0191/)$8\":\u01FE\"\"! )(\"'#&'#"),
    peg$decode("%;\u0189/2#;\u01B4/)$8\":D\"\"! )(\"'#&'#"),
    peg$decode("<%;\u0189/' 8!:\u0200!! )=.\" 7\u01FF"),
    peg$decode("<%;\u0189/' 8!:\u0202!! )=.\" 7\u0201"),
    peg$decode("<%;\u018D.\" &\"/2#;\u0189/)$8\":\u0204\"\"! )(\"'#&'#=.\" 7\u0203"),
    peg$decode("<%;\u018D.\" &\"/2#;\u0189/)$8\":\u0206\"\"! )(\"'#&'#=.\" 7\u0205"),
    peg$decode("<%;\u018D.\" &\"/2#;\u0189/)$8\":\u0208\"\"! )(\"'#&'#=.\" 7\u0207"),
    peg$decode("<%;\u018D.\" &\"/2#;\u0189/)$8\":\u020A\"\"! )(\"'#&'#=.\" 7\u0209"),
    peg$decode("<%;\u0199.# &;\u018C/1#;\u0258/($8\":\u020C\"!!)(\"'#&'#=.\" 7\u020B"),
    peg$decode("%;\u018C/;#;\u0258/2$;\xF5/)$8#:\u020D#\"\" )(#'#(\"'#&'#"),
    peg$decode("<%;\u0189/' 8!:\u020F!! )=.\" 7\u020E"),
    peg$decode("<%;\u0189/' 8!:\u0211!! )=.\" 7\u0210"),
    peg$decode("<%;\u019D/=#%<;\u01A4=.##&&!&'#/($8\":\u0213\"!!)(\"'#&'#.\xC5 &%;\u019E/=#%<;\u01A4=.##&&!&'#/($8\":\u0214\"!!)(\"'#&'#.\x9B &%;\u01A0/=#%<;\u01A4=.##&&!&'#/($8\":\u0215\"!!)(\"'#&'#.q &%;\u01A1/=#%<;\u01A4=.##&&!&'#/($8\":\u0216\"!!)(\"'#&'#.G &%;\u01A3/=#%<;\u01A4=.##&&!&'#/($8\":\u0217\"!!)(\"'#&'#=.\" 7\u0212"),
    peg$decode("<%%3\u0219\"\"5!7\u021A.\" &\"/F#3\u021B\"\"5#7\u021C.\" &\"/2$3\u021D\"\"5$7\u021E/#$+#)(#'#(\"'#&'#.k &%3\u021F\"\"5$7\u0220.5 &3\u0221\"\"5&7\u0222.) &3\u0223\"\"5$7\u0224.\" &\"/2#3\u0225\"\"5$7\u0226/#$+\")(\"'#&'#.) &3\u0227\"\"5$7\u0228/' 8!:\u011B!! )=.\" 7\u0218"),
    peg$decode("<%;\u019F.5 &3\u022A\"\"5%7\u022B.) &3\u022C\"\"5$7\u022D/' 8!:\u011B!! )=.\" 7\u0229"),
    peg$decode("<%3\u022F\"\"5&7\u0230/i#%$4(\"\"5!7)/,#0)*4(\"\"5!7)&&&#/2#3\u0231\"\"5)7\u0232/#$+\")(\"'#&'#.\" &\"/)$8\":\u0233\"\"! )(\"'#&'#=.\" 7\u022E"),
    peg$decode("<%3\u0235\"\"5'7\u0236.\x95 &3\u0237\"\"5'7\u0238.\x89 &3\u0239\"\"5'7\u023A.} &%3\u023B\"\"5$7\u023C/7#3\u023D\"\"5$7\u023E.\" &\"/#$+\")(\"'#&'#.S &%3\u023D\"\"5$7\u023E/7#3\u023F\"\"5%7\u0240.\" &\"/#$+\")(\"'#&'#.) &3\u0241\"\"5&7\u0242/' 8!:\u011B!! )=.\" 7\u0234"),
    peg$decode("<%%3\u0244\"\"5#7\u0245/V#2\u0246\"\"6\u02467\u0247.A &2\u0248\"\"6\u02487\u0249.5 &2\u024A\"\"6\u024A7\u024B.) &3\u024C\"\"5$7\u024D/#$+\")(\"'#&'#.q &%3\u024E\"\"5#7\u024F.A &3\u0221\"\"5&7\u0222.5 &3\u0250\"\"5%7\u0251.) &3\u021F\"\"5$7\u0220.\" &\"/2#3\u0244\"\"5#7\u0245/#$+\")(\"'#&'#.# &;\u01A2/' 8!:\u011B!! )=.\" 7\u0243"),
    peg$decode("%3\u0252\"\"5(7\u0253/d#%$4(\"\"5!7)/,#0)*4(\"\"5!7)&&&#/2#3\u0254\"\"5%7\u0255/#$+\")(\"'#&'#/)$8\":\u0256\"\"! )(\"'#&'#"),
    peg$decode("<%3\u0258\"\"5$7\u0259/' 8!:\u011B!! )=.\" 7\u0257"),
    peg$decode("4\u025A\"\"5!7\u025B"),
    peg$decode("%2\u025C\"\"6\u025C7\u025D/K#$4\u025E\"\"5!7\u025F/,#0)*4\u025E\"\"5!7\u025F&&&#/)$8\":\u0260\"\"! )(\"'#&'#"),
    peg$decode(";\u01A7.# &;\u01A8"),
    peg$decode(";\u01AA./ &;\u01AE.) &;\u01AC.# &;\u01AD"),
    peg$decode("%%<;\u024D.# &;>=.##&&!&'#/J#$;\u01A5.# &;\u01A4/,#0)*;\u01A5.# &;\u01A4&&&#/($8\":\xE3\"! )(\"'#&'#"),
    peg$decode("%%<;\u024F.# &;>=.##&&!&'#/J#$;\u01A5.# &;\u01A4/,#0)*;\u01A5.# &;\u01A4&&&#/($8\":\u0261\"! )(\"'#&'#"),
    peg$decode("%;\u01AF/\x99#;\u0258/\x90$%$%%<;\u01AB=.##&&!&'#/1#1\"\"5!7\u0262/#$+\")(\"'#&'#0G*%%<;\u01AB=.##&&!&'#/1#1\"\"5!7\u0262/#$+\")(\"'#&'#&/\"!&,)/1$;\u01AB/($8$:\u0263$!!)($'#(#'#(\"'#&'#"),
    peg$decode("%$4\u0264\"\"5!7\u02650)*4\u0264\"\"5!7\u0265&/5#;\u01B0/,$;\u0258/#$+#)(#'#(\"'#&'#"),
    peg$decode("%2\u0266\"\"6\u02667\u0267/k#$2\u0268\"\"6\u02687\u0269.) &4\u026A\"\"5!7\u026B05*2\u0268\"\"6\u02687\u0269.) &4\u026A\"\"5!7\u026B&/7$2\u0266\"\"6\u02667\u0267/($8#:\u026C#!!)(#'#(\"'#&'#"),
    peg$decode("%2\u026D\"\"6\u026D7\u026E/k#$26\"\"6677.) &48\"\"5!7905*26\"\"6677.) &48\"\"5!79&/7$2\u026D\"\"6\u026D7\u026E/($8#:\u026F#!!)(#'#(\"'#&'#"),
    peg$decode("%2\u0270\"\"6\u02707\u0271/k#$2\u0272\"\"6\u02727\u0273.) &4\u0274\"\"5!7\u027505*2\u0272\"\"6\u02727\u0273.) &4\u0274\"\"5!7\u0275&/7$2\u0270\"\"6\u02707\u0271/($8#:\u0276#!!)(#'#(\"'#&'#"),
    peg$decode("<%2\u0278\"\"6\u02787\u0279/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u0277"),
    peg$decode("<%2\u027B\"\"6\u027B7\u027C/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u027A"),
    peg$decode("<%2\u027E\"\"6\u027E7\u027F/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u027D"),
    peg$decode("<%2\u0281\"\"6\u02817\u0282/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u0280"),
    peg$decode("<%2\u0284\"\"6\u02847\u0285/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u0283"),
    peg$decode("<%2\u0287\"\"6\u02877\u0288/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u0286"),
    peg$decode("<%2\u028A\"\"6\u028A7\u028B/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u0289"),
    peg$decode("<%2\u028D\"\"6\u028D7\u028E/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u028C"),
    peg$decode("<%2\u026D\"\"6\u026D7\u026E/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u028F"),
    peg$decode("<%2\u0266\"\"6\u02667\u0267/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u0290"),
    peg$decode("<%2\u0270\"\"6\u02707\u0271/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u0291"),
    peg$decode("<%2\u0293\"\"6\u02937\u0294/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u0292"),
    peg$decode("<%2\u0296\"\"6\u02967\u0297/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u0295"),
    peg$decode("<%2\u0299\"\"6\u02997\u029A/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u0298"),
    peg$decode("<%2\u029B\"\"6\u029B7\u029C/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u01EC"),
    peg$decode("<%2\u029E\"\"6\u029E7\u029F/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u029D"),
    peg$decode("<%2\u02A1\"\"6\u02A17\u02A2/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u02A0"),
    peg$decode("<%2\u02A3\"\"6\u02A37\u02A4/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u01E3"),
    peg$decode("<%2\u02A5\"\"6\u02A57\u02A6/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u01E8"),
    peg$decode("<%2\u02A7\"\"6\u02A77\u02A8/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u01E9"),
    peg$decode("<%2\u02AA\"\"6\u02AA7\u02AB/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u02A9"),
    peg$decode("<%2\u02AD\"\"6\u02AD7\u02AE/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u02AC"),
    peg$decode("<%2a\"\"6a7b/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u02AF"),
    peg$decode("<%2\u02B1\"\"6\u02B17\u02B2/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u02B0"),
    peg$decode("<%2\u02B4\"\"6\u02B47\u02B5/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u02B3"),
    peg$decode("<%4\u02B7\"\"5!7\u02B8/1#;\u0258/($8\":\"\"!!)(\"'#&'#=.\" 7\u02B6"),
    peg$decode("%3\u02B9\"\"5%7\u02BA/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02BB\"\"5&7\u02BC/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02BD\"\"5#7\u02BE/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02BF\"\"5%7\u02C0/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02C1\"\"5#7\u02C2/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02C3\"\"5%7\u02C4/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02C5\"\"5'7\u02C6/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02C7\"\"5#7\u02C8/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02C9\"\"5\"7\u02CA/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02CB\"\"5#7\u02CC/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02CD\"\"5&7\u02CE/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02CF\"\"5-7\u02D0/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02D1\"\"5&7\u02D2/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02D3\"\"5%7\u02D4/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02D5\"\"5'7\u02D6/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02D7\"\"5\"7\u02D8/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02D9\"\"5'7\u02DA/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02DB\"\"5$7\u02DC/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02DD\"\"5$7\u02DE/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02DF\"\"5%7\u02E0/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02E1\"\"5'7\u02E2/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02E3\"\"5&7\u02E4/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02E5\"\"5&7\u02E6/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02E7\"\"5(7\u02E8/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02E9\"\"5*7\u02EA/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02EB\"\"5&7\u02EC/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02ED\"\"5%7\u02EE/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02EF\"\"5,7\u02F0/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02F1\"\"5,7\u02F2/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02F3\"\"517\u02F4/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02F5\"\"5(7\u02F6/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02F7\"\"5'7\u02F8/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02F9\"\"5*7\u02FA/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02FB\"\"5(7\u02FC/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02FD\"\"5&7\u02FE/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u02FF\"\"5$7\u0300/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0301\"\"5&7\u0302/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0303\"\"5(7\u0304/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0305\"\"5$7\u0306/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0307\"\"5$7\u0308/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0309\"\"5$7\u030A/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u030B\"\"5#7\u030C/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u030D\"\"5&7\u030E/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u030F\"\"5&7\u0310/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0311\"\"5)7\u0312/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0313\"\"5&7\u0314/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0315\"\"5'7\u0316/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0317\"\"5$7\u0318/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0319\"\"5%7\u031A/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u031B\"\"5#7\u031C/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u031D\"\"5'7\u031E/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u031F\"\"5$7\u0320/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0321\"\"5$7\u0322/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0323\"\"5$7\u0324/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0325\"\"5%7\u0326/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0327\"\"5&7\u0328/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0329\"\"5\"7\u032A/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u032B\"\"5&7\u032C/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u032D\"\"5)7\u032E/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u032F\"\"5\"7\u0330/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0331\"\"5%7\u0332/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0333\"\"5'7\u0334/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0335\"\"5)7\u0336/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0337\"\"5%7\u0338/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0339\"\"5&7\u033A/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u033B\"\"5'7\u033C/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u033D\"\"5)7\u033E/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u033F\"\"5$7\u0340/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0341\"\"5\"7\u0342/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0343\"\"5&7\u0344/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0345\"\"5$7\u0346/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0347\"\"5#7\u0348/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0349\"\"5$7\u034A/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u034B\"\"5$7\u034C/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u034D\"\"5$7\u034E/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u034F\"\"5%7\u0350/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0351\"\"5%7\u0352/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0353\"\"5'7\u0354/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0355\"\"5\"7\u0356/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0357\"\"5#7\u0358/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0359\"\"5'7\u035A/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3}\"\"5$7~/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u035B\"\"5%7\u035C/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u035D\"\"5\"7\u035E/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u035F\"\"5&7\u0360/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0361\"\"5\"7\u0362/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0363\"\"5\"7\u0364/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0365\"\"5%7\u0366/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0367\"\"5%7\u0368/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0369\"\"5$7\u036A/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u036B\"\"5)7\u036C/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u036D\"\"5$7\u036E/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u036F\"\"5&7\u0370/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0371\"\"5'7\u0372/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0373\"\"5%7\u0374/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0375\"\"5%7\u0376/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0377\"\"5)7\u0378/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0379\"\"5*7\u037A/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u037B\"\"5&7\u037C/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u037D\"\"5'7\u037E/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u037F\"\"5'7\u0380/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0381\"\"5&7\u0382/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0383\"\"5'7\u0384/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0385\"\"5(7\u0386/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0387\"\"5)7\u0388/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0389\"\"5%7\u038A/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u038B\"\"5(7\u038C/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u038D\"\"5#7\u038E/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u038F\"\"5%7\u0390/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0391\"\"5)7\u0392/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0393\"\"5&7\u0394/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0395\"\"5#7\u0396/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0397\"\"5%7\u0398/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u0399\"\"5$7\u039A/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u039B\"\"5)7\u039C/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u039D\"\"5$7\u039E/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u039F\"\"5\"7\u03A0/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u03A1\"\"5+7\u03A2/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u03A3\"\"5'7\u03A4/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u03A5\"\"5%7\u03A6/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u03A7\"\"5&7\u03A8/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u03A9\"\"5&7\u03AA/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u03AB\"\"5%7\u03AC/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u03AD\"\"5&7\u03AE/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u03AF\"\"5&7\u03B0/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u03B1\"\"5$7\u03B2/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u03B3\"\"5'7\u03B4/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u03B5\"\"5$7\u03B6/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u03B7\"\"5%7\u03B8/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u03B9\"\"5&7\u03BA/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u03BB\"\"5$7\u03BC/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%3\u03BD\"\"5'7\u03BE/8#%<;\u01A4=.##&&!&'#/#$+\")(\"'#&'#"),
    peg$decode("%;\u024E/' 8!:\u03BF!! )"),
    peg$decode(";\u01C9.\u0323 &;\u01CA.\u031D &;\u01CB.\u0317 &;\u01CC.\u0311 &;\u01CD.\u030B &;\u01CE.\u0305 &;\u01CF.\u02FF &;\u01D0.\u02F9 &;\u01D1.\u02F3 &;\u01D2.\u02ED &;\u01D3.\u02E7 &;\u01D4.\u02E1 &;\u01D5.\u02DB &;\u01D6.\u02D5 &;\u01D7.\u02CF &;\u01D8.\u02C9 &;\u01D9.\u02C3 &;\u01DA.\u02BD &;\u01DB.\u02B7 &;\u01DC.\u02B1 &;\u01DD.\u02AB &;\u01DE.\u02A5 &;\u01DF.\u029F &;\u01E0.\u0299 &;\u01E1.\u0293 &;\u01E2.\u028D &;\u01E3.\u0287 &;\u01E4.\u0281 &;\u01E5.\u027B &;\u01E6.\u0275 &;\u01E7.\u026F &;\u01E8.\u0269 &;\u01E9.\u0263 &;\u01EA.\u025D &;\u01EB.\u0257 &;\u01EC.\u0251 &;\u01ED.\u024B &;\u01EE.\u0245 &;\u01EF.\u023F &;\u01F0.\u0239 &;\u01F1.\u0233 &;\u01F2.\u022D &;\u01F3.\u0227 &;\u01F4.\u0221 &;\u01F5.\u021B &;\u01F6.\u0215 &;\u01F7.\u020F &;\u01F8.\u0209 &;\u01F9.\u0203 &;\u01FA.\u01FD &;\u01FB.\u01F7 &;\u01FC.\u01F1 &;\u01FD.\u01EB &;\u01FE.\u01E5 &;\u01FF.\u01DF &;\u0200.\u01D9 &;\u0201.\u01D3 &;\u0202.\u01CD &;\u0203.\u01C7 &;\u0204.\u01C1 &;\u0205.\u01BB &;\u0206.\u01B5 &;\u0207.\u01AF &;\u0208.\u01A9 &;\u0209.\u01A3 &;\u020A.\u019D &;\u020B.\u0197 &;\u020C.\u0191 &;\u020D.\u018B &;\u020E.\u0185 &;\u020F.\u017F &;\u0210.\u0179 &;\u0211.\u0173 &;\u0212.\u016D &;\u0213.\u0167 &;\u0214.\u0161 &;\u0215.\u015B &;\u0216.\u0155 &;\u0217.\u014F &;\u0218.\u0149 &;\u0219.\u0143 &;\u021A.\u013D &;\u021B.\u0137 &;\u021C.\u0131 &;\u021D.\u012B &;\u021E.\u0125 &;\u021F.\u011F &;\u0220.\u0119 &;\u0221.\u0113 &;\u0222.\u010D &;\u0223.\u0107 &;\u0224.\u0101 &;\u0225.\xFB &;\u0226.\xF5 &;\u0227.\xEF &;\u0228.\xE9 &;\u0229.\xE3 &;\u022A.\xDD &;\u022B.\xD7 &;\u022C.\xD1 &;\u022D.\xCB &;\u022E.\xC5 &;\u022F.\xBF &;\u0230.\xB9 &;\u0231.\xB3 &;\u0232.\xAD &;\u0233.\xA7 &;\u0234.\xA1 &;\u0236.\x9B &;\u0237.\x95 &;\u0238.\x8F &;\u0239.\x89 &;\u023B.\x83 &;\u023C.} &;\u023D.w &;\u023E.q &;\u023F.k &;\u0240.e &;\u0241._ &;\u0242.Y &;\u0243.S &;\u0244.M &;\u0245.G &;\u0246.A &;\u0247.; &;\u0248.5 &;\u0249./ &;\u024A.) &;\u024B.# &;\u024C"),
    peg$decode(";\u01CB.\u0167 &;\u01CD.\u0161 &;\u01CE.\u015B &;\u01D0.\u0155 &;\u01D1.\u014F &;\u01D4.\u0149 &;\u01D7.\u0143 &;\u01DA.\u013D &;\u01DC.\u0137 &;\u01DD.\u0131 &;\u01DF.\u012B &;\u01E1.\u0125 &;\u01E2.\u011F &;\u01E8.\u0119 &;\u01E9.\u0113 &;\u01EB.\u010D &;\u01EE.\u0107 &;\u01EF.\u0101 &;\u01F1.\xFB &;\u01F3.\xF5 &;\u01F4.\xEF &;\u01F6.\xE9 &;\u01FB.\xE3 &;\u01FC.\xDD &;\u01FF.\xD7 &;\u0200.\xD1 &;\u0204.\xCB &;\u0205.\xC5 &;\u0209.\xBF &;\u020B.\xB9 &;\u020C.\xB3 &;\u020D.\xAD &;\u020E.\xA7 &;\u020F.\xA1 &;\u0214.\x9B &;\u0218.\x95 &;\u0219.\x8F &;\u021A.\x89 &;\u021E.\x83 &;\u021F.} &;\u0220.w &;\u0226.q &;\u022A.k &;\u0237.e &;\u0238._ &;\u0239.Y &;\u023C.S &;\u023D.M &;\u023E.G &;\u0240.A &;\u0241.; &;\u0242.5 &;\u0243./ &;\u0245.) &;\u0248.# &;\u0249"),
    peg$decode(";\u0251.. &%;\u0252/& 8!:\u03C0! )"),
    peg$decode("<%2\u03C2\"\"6\u03C27\u03C3/\x87#$%%<4\u03C4\"\"5!7\u03C5=.##&&!&'#/1#1\"\"5!7\u0262/#$+\")(\"'#&'#0M*%%<4\u03C4\"\"5!7\u03C5=.##&&!&'#/1#1\"\"5!7\u0262/#$+\")(\"'#&'#&/#$+\")(\"'#&'#=.\" 7\u03C1"),
    peg$decode("<%;\u0253/5#;\u0257/,$;\u0254/#$+#)(#'#(\"'#&'#=.\" 7\u03C6"),
    peg$decode("2\u03C7\"\"6\u03C77\u03C8"),
    peg$decode("2\u03C9\"\"6\u03C97\u03CA"),
    peg$decode("$%%<;\u0254.# &;\u0253=.##&&!&'#/1#1\"\"5!7\u0262/#$+\")(\"'#&'#/P#0M*%%<;\u0254.# &;\u0253=.##&&!&'#/1#1\"\"5!7\u0262/#$+\")(\"'#&'#&&&#"),
    peg$decode(";\u0255.# &;\u0252"),
    peg$decode("%;\u0256/K#$4\u03CB\"\"5!7\u03CC.# &;\u02560/*4\u03CB\"\"5!7\u03CC.# &;\u0256&/#$+\")(\"'#&'#"),
    peg$decode("<%$4\u03CB\"\"5!7\u03CC.# &;\u02500/*4\u03CB\"\"5!7\u03CC.# &;\u0250&/' 8!:-!! )=.\" 7\u03CD"),
    peg$decode("2\u03CE\"\"6\u03CE7\u03CF")
  ];

  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$resultsCache = {};

  var peg$ruleNames = ["start", "start_streaming", "stmt_list", "semi_optional", "semi_required", "stmt_list_tail", "type_definition", "type_definition_types", "datatype_custom", "datatype_word_tail", "type_definition_args", "definition_args_loop", "literal_value", "literal_null", "literal_date", "literal_string", "literal_string_single", "literal_string_schar", "literal_blob", "literal_text", "number_sign", "literal_number_signed", "literal_number", "literal_number_decimal", "number_decimal_node", "number_decimal_full", "number_decimal_fraction", "number_decimal_exponent", "literal_number_hex", "number_hex", "number_digit", "bind_parameter", "bind_parameter_numbered", "bind_number_id", "bind_parameter_named", "bind_parameter_tcl", "tcl_suffix", "expression_exists", "expression_exists_ne", "expression_raise", "expression_raise_args", "raise_args_ignore", "raise_args_message", "expression_root", "expression_wrapped", "expression_recur", "expression_unary_collate", "expression_pg_cast", "expression_unary", "expression_unary_op", "expression_collate", "expression_concat", "expression_multiply", "expression_multiply_op", "expression_add", "expression_add_op", "expression_shift", "expression_shift_op", "expression_compare", "expression_compare_op", "expression_equiv", "expression_equiv_tails", "expression_equiv_null_op", "expression_equiv_op", "expression_cast", "type_alias", "expression_case", "case_expression", "expression_case_when", "expression_case_else", "expression_postfix", "expression_postfix_tail", "expression_like", "expression_escape", "expression_between", "expression_between_tail", "expression_is_not", "expression_in", "expression_in_target", "expression_list_or_select", "expression_and", "expression", "expression_list", "expression_list_loop", "expression_list_rest", "function_call", "function_call_args", "args_list_distinct", "over_clause", "window_name", "window_specification", "source_window_name", "partition_clause", "error_message", "stmt", "stmt_modifier", "modifier_query", "stmt_nodes", "stmt_commit", "stmt_begin", "commit_transaction", "stmt_begin_modifier", "stmt_rollback", "rollback_savepoint", "savepoint_name", "savepoint_alt", "stmt_savepoint", "stmt_release", "stmt_alter", "alter_start", "alter_action", "alter_action_rename", "alter_action_add", "action_add_modifier", "stmt_crud", "stmt_core_with", "clause_with", "clause_with_recursive", "clause_with_tables", "clause_with_loop", "expression_cte", "select_alias", "select_wrapped", "stmt_select_full", "stmt_sqlite", "stmt_attach", "attach_arg", "stmt_detach", "stmt_vacuum", "vacuum_target", "stmt_analyze", "analyze_arg", "stmt_reindex", "reindex_arg", "stmt_pragma", "pragma_expression", "pragma_value", "pragma_value_literal", "pragma_value_bool", "pragma_bool_id", "pragma_value_name", "stmt_crud_types", "stmt_select", "window_clause", "window_definition_list", "window_definition_loop", "window_definition", "stmt_core_order", "stmt_core_limit", "stmt_core_limit_offset", "limit_offset_variant", "limit_offset_variant_name", "select_loop", "select_loop_union", "select_parts", "select_parts_core", "select_core_select", "select_modifier", "select_modifier_distinct", "select_modifier_all", "select_target", "select_target_loop", "select_core_from", "stmt_core_where", "select_core_group", "select_core_having", "select_node", "select_node_star", "select_node_star_qualified", "select_node_aliased", "select_source", "source_loop_tail", "select_cross_clause", "select_join_clause", "table_or_sub", "table_or_sub_func", "table_qualified", "table_qualified_id", "table_or_sub_index_node", "index_node_indexed", "index_node_none", "table_or_sub_sub", "table_or_sub_select", "alias", "join_operator", "join_operator_natural", "join_operator_types", "operator_types_hand", "types_hand_outer", "operator_types_misc", "join_condition", "join_condition_on", "join_condition_using", "select_parts_values", "stmt_core_order_list", "stmt_core_order_list_loop", "stmt_core_order_list_item", "nulls_order", "select_star", "stmt_fallback_types", "stmt_insert", "returning_clause", "insert_keyword", "insert_keyword_ins", "insert_keyword_repl", "insert_keyword_mod", "insert_target", "insert_into", "insert_into_start", "insert_results", "opt_on_conflict", "opt_on_conflict_action", "opt_conf_expr", "loop_columns", "loop_column_tail", "loop_name", "insert_value", "insert_value_start", "insert_values_list", "insert_values_loop", "expression_list_wrapped", "insert_default", "operator_compound", "compound_union", "compound_union_all", "stmt_update", "update_start", "update_fallback", "update_set", "update_columns", "update_columns_tail", "update_column", "update_expression", "stmt_delete", "delete_start", "stmt_create", "create_start", "create_table_only", "create_index_only", "create_trigger_only", "create_view_only", "create_virtual_only", "create_table", "create_table_start", "create_core_tmp", "create_core_ine", "create_table_source", "table_source_def", "source_def_rowid", "source_def_loop", "source_def_tail", "source_tbl_loop", "source_def_column", "source_def_name", "column_type", "column_constraints", "column_constraint_tail", "column_constraint", "constraint_name", "constraint_name_loop", "column_constraint_types", "column_constraint_foreign", "column_constraint_primary", "col_primary_start", "col_primary_auto", "column_constraint_null", "constraint_null_types", "constraint_null_value", "column_constraint_check", "column_constraint_default", "column_default_values", "column_constraint_collate", "table_constraint", "table_constraint_types", "table_constraint_check", "table_constraint_primary", "primary_start", "primary_start_normal", "primary_start_unique", "primary_columns", "primary_columns_index", "primary_columns_table", "primary_column_tail", "primary_column", "primary_column_types", "column_collate", "column_collate_loop", "primary_column_dir", "primary_conflict", "primary_conflict_start", "constraint_check", "table_constraint_foreign", "foreign_start", "foreign_clause", "foreign_references", "foreign_actions", "foreign_actions_tail", "foreign_action", "foreign_action_on", "action_on_action", "on_action_set", "on_action_cascade", "on_action_none", "foreign_action_match", "foreign_deferrable", "deferrable_initially", "table_source_select", "create_index", "create_index_start", "index_unique", "index_on", "create_trigger", "create_trigger_start", "trigger_conditions", "trigger_apply_mods", "trigger_apply_instead", "trigger_do", "trigger_do_on", "trigger_do_update", "do_update_of", "do_update_columns", "trigger_foreach", "trigger_when", "trigger_action", "action_loop", "action_loop_stmt", "create_view", "id_view_expression", "create_view_start", "create_as_select", "create_virtual", "create_virtual_start", "virtual_module", "virtual_args", "virtual_args_loop", "virtual_args_tail", "virtual_arg_types", "virtual_column_name", "stmt_drop", "drop_start", "drop_types", "drop_ie", "binary_concat", "binary_plus", "binary_minus", "binary_multiply", "binary_divide", "binary_mod", "binary_left", "binary_right", "binary_and", "binary_or", "binary_lt", "binary_gt", "binary_lte", "binary_gte", "binary_equal", "binary_notequal_a", "binary_notequal_b", "binary_custom", "binary_lang_isnt", "id_name", "id_database", "id_function", "id_table", "id_table_qualified", "id_column", "column_unqualified", "column_qualifiers", "id_column_qualified", "id_collation", "id_savepoint", "id_index", "id_trigger", "id_view", "id_pragma", "id_cte", "id_table_expression", "id_constraint_table", "id_constraint_column", "datatype_types", "datatype_text", "datatype_real", "datatype_real_double", "datatype_numeric", "datatype_integer", "datatype_integer_fp", "datatype_none", "name_char", "unicode_char", "name", "name_quoted", "name_unquoted", "name_reserved", "name_bracketed", "bracket_terminator", "name_dblquoted", "name_sglquoted", "name_backticked", "sym_bopen", "sym_bclose", "sym_popen", "sym_pclose", "sym_comma", "sym_dot", "sym_star", "sym_quest", "sym_sglquote", "sym_dblquote", "sym_backtick", "sym_tilde", "sym_plus", "sym_minus", "sym_equal", "sym_amp", "sym_pipe", "sym_mod", "sym_lt", "sym_gt", "sym_excl", "sym_semi", "sym_colon", "sym_fslash", "sym_bslash", "sym_op", "ABORT", "ACTION", "ADD", "AFTER", "ALL", "ALTER", "ANALYZE", "AND", "AS", "ASC", "ATTACH", "AUTOINCREMENT", "BEFORE", "BEGIN", "BETWEEN", "BY", "CASCADE", "CASE", "CAST", "CHECK", "COLLATE", "COLUMN", "COMMIT", "CONFLICT", "CONSTRAINT", "CREATE", "CROSS", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "DATABASE", "DEFAULT", "DEFERRABLE", "DEFERRED", "DELETE", "DESC", "DETACH", "DISTINCT", "DROP", "EACH", "ELSE", "END", "ESCAPE", "EXCEPT", "EXCLUSIVE", "EXISTS", "EXPLAIN", "FAIL", "FIRST", "FOR", "FOREIGN", "FROM", "FULL", "GLOB", "GROUP", "HAVING", "IF", "IGNORE", "IMMEDIATE", "IN", "INDEX", "INDEXED", "INITIALLY", "INNER", "INSERT", "INSTEAD", "INTERSECT", "INTO", "IS", "ISNULL", "JOIN", "KEY", "LAST", "LEFT", "LIKE", "LIMIT", "MATCH", "NATURAL", "NO", "NOT", "NOTNULL", "NULL", "NULLS", "OF", "OFFSET", "ON", "OR", "ORDER", "OUTER", "OVER", "PARTITION", "PLAN", "PRAGMA", "PRIMARY", "QUERY", "RAISE", "RECURSIVE", "REFERENCES", "REGEXP", "REINDEX", "RELEASE", "RENAME", "REPLACE", "RESTRICT", "RETURNING", "RIGHT", "ROLLBACK", "ROW", "ROWID", "SAVEPOINT", "SELECT", "SET", "TABLE", "TEMP", "TEMPORARY", "THEN", "TO", "TRANSACTION", "TRIGGER", "UNION", "UNIQUE", "UPDATE", "USING", "VACUUM", "VALUES", "VIEW", "VIRTUAL", "WHEN", "WHERE", "WINDOW", "WITH", "WITHOUT", "reserved_words", "reserved_word_list", "reserved_critical_list", "comment", "comment_line", "comment_block", "comment_block_start", "comment_block_end", "comment_block_body", "block_body_nodes", "comment_block_feed", "o", "_TODO_"];
  var peg$descNames = [null, null, null, null, null, null, "Type Definition", null, "Custom Datatype Name", null, "Type Definition Arguments", null, null, "Null Literal", "Date Literal", "String Literal", "Single-quoted String Literal", null, "Blob Literal", null, "Number Sign", null, null, null, "Decimal Literal", null, null, "Decimal Literal Exponent", "Hexidecimal Literal", null, null, "Bind Parameter", "Numbered Bind Parameter", null, "Named Bind Parameter", "TCL Bind Parameter", null, "EXISTS Expression", "EXISTS Keyword", "RAISE Expression", "RAISE Expression Arguments", "IGNORE Keyword", null, null, null, null, null, "PSQL-style cast", null, null, "COLLATE Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, "CAST Expression", "Type Alias", "CASE Expression", null, "WHEN Clause", "ELSE Clause", null, null, "Comparison Expression", "ESCAPE Expression", "BETWEEN Expression", null, null, "IN Expression", null, null, null, null, "Expression List", null, null, "Function Call", "Function Call Arguments", null, "OVER clause", "Window name", "Window specification", null, "window partition clause", "Error Message", "Statement", "QUERY PLAN", "QUERY PLAN Keyword", null, "END Transaction Statement", "BEGIN Transaction Statement", null, null, "ROLLBACK Statement", "TO Clause", null, null, "SAVEPOINT Statement", "RELEASE Statement", "ALTER TABLE Statement", "ALTER TABLE Keyword", null, "RENAME TO Keyword", "ADD COLUMN Keyword", null, null, "WITH Clause", null, null, null, null, "Common Table Expression", null, null, null, null, "ATTACH Statement", null, "DETACH Statement", "VACUUM Statement", null, "ANALYZE Statement", null, "REINDEX Statement", null, "PRAGMA Statement", null, null, null, null, null, null, null, "SELECT Statement", "WINDOW clause", null, null, null, "ORDER BY Clause", "LIMIT Clause", "OFFSET Clause", null, null, null, "Union Operation", null, null, "SELECT Results Clause", "SELECT Results Modifier", null, null, null, null, "FROM Clause", "WHERE Clause", "GROUP BY Clause", "HAVING Clause", null, null, null, null, null, null, "CROSS JOIN Operation", "JOIN Operation", null, null, "Qualified Table", "Qualified Table Identifier", "Qualfied Table Index", null, null, "SELECT Source", "Subquery", "Alias", "JOIN Operator", null, null, null, null, null, "JOIN Constraint", "Join ON Clause", "Join USING Clause", "VALUES Clause", null, null, "Ordering Expression", null, "Star", "Fallback Type", "INSERT Statement", "RETURNING clause", null, "INSERT Keyword", "REPLACE Keyword", "INSERT OR Modifier", null, "INTO Clause", "INTO Keyword", "VALUES Clause", "PostgreSQL INSERT ON CONFLICT clause", "PostgreSQL ON CONFLICT action", "PostgreSQL ON CONFLICT expression", "Column List", null, "Column Name", "VALUES Clause", "VALUES Keyword", null, null, "Wrapped Expression List", "DEFAULT VALUES Clause", "Compound Operator", "UNION Operator", null, "UPDATE Statement", "UPDATE Keyword", "UPDATE OR Modifier", "SET Clause", null, null, "Column Assignment", "UPDATE value expression", "DELETE Statement", "DELETE Keyword", "CREATE Statement", null, null, null, null, null, null, "CREATE TABLE Statement", null, null, "IF NOT EXISTS Modifier", null, "Table Definition", null, null, null, null, "Column Definition", null, "Column Datatype", null, null, "Column Constraint", null, "CONSTRAINT Name", null, "FOREIGN KEY Column Constraint", "PRIMARY KEY Column Constraint", "PRIMARY KEY Keyword", "AUTOINCREMENT Keyword", null, "UNIQUE Column Constraint", "NULL Column Constraint", "CHECK Column Constraint", "DEFAULT Column Constraint", null, "COLLATE Column Constraint", "Table Constraint", null, "CHECK Table Constraint", "PRIMARY KEY Table Constraint", null, "PRIMARY KEY Keyword", "UNIQUE Keyword", null, null, null, null, "Indexed Column", null, "Collation", null, "Column Direction", null, "ON CONFLICT Keyword", null, "FOREIGN KEY Table Constraint", "FOREIGN KEY Keyword", null, "REFERENCES Clause", null, null, "FOREIGN KEY Action Clause", null, "FOREIGN KEY Action", null, null, null, null, "DEFERRABLE Clause", null, null, "CREATE INDEX Statement", null, null, "ON Clause", "CREATE TRIGGER Statement", null, "Conditional Clause", null, null, "Conditional Action", null, null, null, null, null, "WHEN Clause", "Actions Clause", null, null, "CREATE VIEW Statement", null, null, null, "CREATE VIRTUAL TABLE Statement", null, null, "Module Arguments", null, null, null, null, "DROP Statement", "DROP Keyword", "DROP Type", "IF EXISTS Keyword", "Or", "Add", "Subtract", "Multiply", "Divide", "Modulo", "Shift Left", "Shift Right", "Logical AND", "Logical OR", "Less Than", "Greater Than", "Less Than Or Equal", "Greater Than Or Equal", "Equal", "Not Equal", "Not Equal", "PostgreSQL custom binary operarator", "IS", "Identifier", "Database Identifier", "Function Identifier", "Table Identifier", null, "Column Identifier", null, null, null, "Collation Identifier", "Savepoint Identifier", "Index Identifier", "Trigger Identifier", "View Identifier", "Pragma Identifier", "CTE Identifier", null, "Table Constraint Identifier", "Column Constraint Identifier", "Datatype Name", "TEXT Datatype Name", "REAL Datatype Name", "DOUBLE Datatype Name", "NUMERIC Datatype Name", "INTEGER Datatype Name", null, "BLOB Datatype Name", null, null, null, null, null, null, null, null, null, null, null, "Open Bracket", "Close Bracket", "Open Parenthesis", "Close Parenthesis", "Comma", "Period", "Asterisk", "Question Mark", "Single Quote", "Double Quote", "Backtick", "Tilde", "Plus", "Minus", "Equal", "Ampersand", "Pipe", "Modulo", "Less Than", "Greater Than", "Exclamation", "Semicolon", "Colon", "Forward Slash", "Backslash", "Operator characters", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Line Comment", "Block Comment", null, null, null, null, null, "Whitespace", null];

  var peg$tracer = "tracer" in options ? options.tracer : new peg$DefaultTracer();

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleIndices)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleIndex = peg$startRuleIndices[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined ? location : peg$computeLocation(peg$savedPos, peg$currPos)

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$decode(s) {
    return s.split("").map(function(ch) { return ch.charCodeAt(0) - 32; });
  }

  function peg$parseRule(index) {
    var bc = peg$bytecode[index];
    var ip = 0;
    var ips = [];
    var end = bc.length;
    var ends = [];
    var stack = [];
    var startPos = peg$currPos;
    var params;

    peg$tracer.trace({
      type: "rule.enter",
      rule: peg$ruleNames[index],
      description: peg$descNames[index],
      location: peg$computeLocation(startPos, startPos)
    });

    var key = peg$currPos * 570 + index;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

    if (cached.result !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: peg$ruleNames[index],
        description: peg$descNames[index],
        result: cached.result,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: peg$ruleNames[index],
        description: peg$descNames[index],
        location: peg$computeLocation(startPos, startPos)
      });
    }

      return cached.result;
    }

    while (true) {
      while (ip < end) {
        switch (bc[ip]) {
          case 0:
            stack.push(peg$consts[bc[ip + 1]]);
            ip += 2;
            break;

          case 1:
            stack.push(undefined);
            ip++;
            break;

          case 2:
            stack.push(null);
            ip++;
            break;

          case 3:
            stack.push(peg$FAILED);
            ip++;
            break;

          case 4:
            stack.push([]);
            ip++;
            break;

          case 5:
            stack.push(peg$currPos);
            ip++;
            break;

          case 6:
            stack.pop();
            ip++;
            break;

          case 7:
            peg$currPos = stack.pop();
            ip++;
            break;

          case 8:
            stack.length -= bc[ip + 1];
            ip += 2;
            break;

          case 9:
            stack.splice(-2, 1);
            ip++;
            break;

          case 10:
            stack[stack.length - 2].push(stack.pop());
            ip++;
            break;

          case 11:
            stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
            ip += 2;
            break;

          case 12:
            stack.push(input.substring(stack.pop(), peg$currPos));
            ip++;
            break;

          case 13:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1]) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 14:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] === peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 15:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (stack[stack.length - 1] !== peg$FAILED) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 16:
            if (stack[stack.length - 1] !== peg$FAILED) {
              ends.push(end);
              ips.push(ip);

              end = ip + 2 + bc[ip + 1];
              ip += 2;
            } else {
              ip += 2 + bc[ip + 1];
            }

            break;

          case 17:
            ends.push(end);
            ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

            if (input.length > peg$currPos) {
              end = ip + 3 + bc[ip + 1];
              ip += 3;
            } else {
              end = ip + 3 + bc[ip + 1] + bc[ip + 2];
              ip += 3 + bc[ip + 1];
            }

            break;

          case 18:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 19:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 20:
            ends.push(end);
            ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

            if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
              end = ip + 4 + bc[ip + 2];
              ip += 4;
            } else {
              end = ip + 4 + bc[ip + 2] + bc[ip + 3];
              ip += 4 + bc[ip + 2];
            }

            break;

          case 21:
            stack.push(input.substr(peg$currPos, bc[ip + 1]));
            peg$currPos += bc[ip + 1];
            ip += 2;
            break;

          case 22:
            stack.push(peg$consts[bc[ip + 1]]);
            peg$currPos += peg$consts[bc[ip + 1]].length;
            ip += 2;
            break;

          case 23:
            stack.push(peg$FAILED);
            if (peg$silentFails === 0) {
              peg$fail(peg$consts[bc[ip + 1]]);
            }
            ip += 2;
            break;

          case 24:
            peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
            ip += 2;
            break;

          case 25:
            peg$savedPos = peg$currPos;
            ip++;
            break;

          case 26:
            params = bc.slice(ip + 4, ip + 4 + bc[ip + 3])
              .map(function(p) { return stack[stack.length - 1 - p]; });

            stack.splice(
              stack.length - bc[ip + 2],
              bc[ip + 2],
              peg$consts[bc[ip + 1]].apply(null, params)
            );

            ip += 4 + bc[ip + 3];
            break;

          case 27:
            stack.push(peg$parseRule(bc[ip + 1]));
            ip += 2;
            break;

          case 28:
            peg$silentFails++;
            ip++;
            break;

          case 29:
            peg$silentFails--;
            ip++;
            break;

          default:
            throw new Error("Invalid opcode: " + bc[ip] + ".");
        }
      }

      if (ends.length > 0) {
        end = ends.pop();
        ip = ips.pop();
      } else {
        break;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: stack[0] };

    if (stack[0] !== peg$FAILED) {
      peg$tracer.trace({
        type: "rule.match",
        rule: peg$ruleNames[index],
        description: peg$descNames[index],
        result: stack[0],
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: peg$ruleNames[index],
        description: peg$descNames[index],
        location: peg$computeLocation(startPos, startPos)
      });
    }

    return stack[0];
  }


    function makeArray(arr) {
      if (!isOkay(arr)) {
        return [];
      }
      return !Array.isArray(arr) ? [arr] : arr;
    }

    function isOkay(obj) {
      return obj != null;
    }

    function foldString(parts, glue = ' ') {
      const folded = parts
      .filter((part) => isOkay(part))
      .reduce((prev, cur) => {
        return `${prev}${nodeToString(cur)}${glue}`;
      }, '');
      return folded.trim();
    }

    function foldStringWord(parts) {
      return foldString(parts, '');
    }

    function foldStringKey(parts) {
      return foldString(parts).toLowerCase();
    }

    function flattenAll(arr) {
      return arr
      .filter((part) => isOkay(part))
      .reduce((prev, cur) => prev.concat(cur), []);
    }

    function unescape(str, quoteChar = '\'') {
      const re = new RegExp(`${quoteChar}{2}`, 'g');
      return nodeToString(str).replace(re, quoteChar);
    }

    function nodeToString(node = []) {
      return makeArray(node).join('');
    }

    /*
     * A text node has
     * - no leading or trailing whitespace
     */
    function textNode(node) {
      return nodeToString(node).trim();
    }

    function keyNode(node) {
      return textNode(node).toLowerCase();
    }

    function isArrayOkay(arr) {
      return Array.isArray(arr) && arr.length > 0 && isOkay(arr[0]);
    }

    function composeBinary(first, rest) {
      return rest
      .reduce((left, [ x, operation, y, right ]) => {
        return {
          'type': 'expression',
          'format': 'binary',
          'variant': 'operation',
          'operation': keyNode(operation),
          'left': left,
          'right': right
        };
      }, first);
    }


  peg$result = peg$parseRule(peg$startRuleIndex);

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  DefaultTracer: peg$DefaultTracer,
  parse: peg$parse
};
